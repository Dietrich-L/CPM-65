;CP/M-65 BDOS
;D. LAUSBERG	(C) 1988
;V1.0	21.01.88
;V1.1	24.05.89	SOME CORRECTIONS
;V1.2	14.06.90	NEW PARAMETERS
;V1.3	24.11.91	ASM-65 Version
;V1.4	27.06.92	record counter fix
;V1.5	10.03.93	double disk version
;V1.6	20.02.95	new memory map, some corrections
;V1.7	09.12.95	SYS track handling corrected
;V1.8	27.03.96	rename error fixed
;V2.0	01.07.00	sector BDOS, 16 Bit block nr
;V2.1	08.04.02	some corrections
;V2.1a	04.05.21	8 Bit CONIO
;V2.2	01.06.21	large drive support (SCSI)

VERSION	= $22
;=====================================

;PAGE 00 CELLS

DMAV	= $FE		;DMA-VECTOR
DIRBFV	= $FC		;DIRBF-VECTOR
BIOSP	= $FA		;BIOS-POINTER
DPHV	= $F8		;DPH-VECTOR
FCB1V	= $F6		;FCB1-VECTOR
FCB2V	= $F4		;FCB2-VECTOR
STATUS	= $F3		;STATUS-FLAG  .^
JPBDOS	= $F0		;JMP BDOS
TEMP	= $EF		;TEMPORARY BUFFER
TEMPA	= $EE		;AKKU BUFFER
INBUFV	= $EC		;INPUT BUFFER VECTOR
BDOS1	= $EA		;BDOS-VECTOR 1
TEMPX	= $E9		;X Buffer
SECBUF	= $E6		;sector buffer for BIOS

;SYSTEM CONSTANTS

BEGIN	= $DC00

FBIOS	= $E400
BOOT	= FBIOS
WBOOT	= FBIOS+3
CONST	= FBIOS+6
CONIN	= FBIOS+9
CONOUT	= FBIOS+12
LIST	= FBIOS+15
AUXOUT	= FBIOS+18
AUXIN	= FBIOS+21
HOME	= FBIOS+24
SELDSK	= FBIOS+27
SETTRK	= FBIOS+30
SETSEC	= FBIOS+33
READ	= FBIOS+36
WRITE	= FBIOS+39
LISTST	= FBIOS+42
GETVER	= FBIOS+45

YBAT	= 4
YDMAV	= 2
YDPB	= 6

BPEXT	= 7		;Blocks per extent -1

;FCB structure

FCB_EXT	= 12
FCB_RC	= 13
FCB_REC	= 15		;128 bytes/rec
FCB_BL	= 16

;CONTROL CODES

EOT	= $00
EOF	= $1A
CLS	= $0C
CR	= $0D
LF	= $0A
BREAK	= $03		;CONTROL-C
BS	= $08		;BACKSPACE
HT	= $09		;HTAB
CTRLP	= $10
CTRLS	= $13

;PSEUDO OPCODES

BIT_ABS	= $2C

;ERROR CODES

EOD	= $DF
DRFULL	= $DE
NOTFND	= $DD
DOUBLE	= $DC
FILOVR	= $DB
INVAL	= $DA
INVFCB	= $D9
DSFULL	= $D8
EOFILE	= $D7
RONLY	= $D6
TRKOVL	= $D5		;Track nr. overflow (currently not used)

;==================================

	ORG BEGIN

	JMP BDOS	

;========== FCB AREA ===========

FCB1	DS 32		;FCB1

FCB2	DS 16		;FCB2

;========== DATA AREA ==========

DIRPNT	DB $00
DIRSEC	DS 3
DIRSCN	DB $00
DEFDRV	DB $00			;DEFAULT DRIVE

BLKBASE	DS 3			;BLOCK/SECTOR TABLE

;========== Command TABLE AREA ========

BEFTAB	DD BDOS00-1	;BEFEHLSTABELLE
	DD BDOS01-1
	DD BDOS02-1
	DD BDOS03-1
	DD BDOS04-1
	DD BDOS05-1
	DD BDOS06-1
	DD BDOS07-1
	DD BDOS08-1
	DD BDOS09-1
	DD BDOS0A-1
	DD BDOS0B-1
	DD BDOS0C-1
	DD BDOS0D-1
	DD BDOS0E-1
	DD BDOS0F-1
	DD BDOS10-1
	DD BDOS11-1
	DD BDOS12-1
	DD BDOS13-1
	DD BDOS14-1
	DD BDOS15-1
	DD BDOS16-1
	DD BDOS17-1
	DD BDOS18-1
	DD BDOS19-1
	DD BDOS1A-1
	DD BDOS1B-1
	DD BDOS1C-1
	DD BDOS1D-1
	DD BDOS1E-1
	DD BDOS1F-1

;=========== DPB ================

SPB	DB 0
SPBDIV	DB 0
BPD	DW 0
DIRSCS	DB 0
DIRMSK	DB 0
RPEXT	DB 0
SYS	DS 3
BATSIZ	DB 0

;============ BDOS-65 ===========

BDOS	STA TEMPA		;FUNCTION DISTRIBUTOR
	TXA			;FN-NR * 2
	ASL A
	TAX
	LDA BEFTAB,X		;SET FN-ADDRESS
	PHA
	INX
	LDA BEFTAB,X
	PHA
	LDA TEMPA
	RTS			;EXEC FUNCTION


BDOS00	LDX #$FF		;WARM BOOT
	TXS
	JSR WBOOT
	BCS BD00X
	JSR SETVEC		;SET DMAV, DIRBFV, FCBV
	LDA DMAV		;INBUF=DMA
	STA INBUFV
	LDA DMAV+1
	STA INBUFV+1
	JSR BDOS0D		;RESET DISK SYSTEM TO DEFAULT DRIVE
	BCS BD00X
	LDA JPBDOS+2
	PHA
	LDA JPBDOS+1
	ADC #2
	PHA
	RTS			;JUMP TO CCP

BD00X	JMP BOOT		;TRY TO REBOOT


BDOS01	JSR CONIN		;CONSOLE INPUT
	JSR TSTCHR		;CHR OK.?
	BCS BDOS01		;IF NOT, FORGET IT
	PHA
	JSR CHROUT		;ECHO CHR
	PLA
	RTS


BDOS02	JSR TSTCHR		;CONSOLE OUTPUT
	BCC BD02A		;IF NOT OK.
	RTS			;THEN RETURN

BD02A	JSR CHROUT		;PRINT CHR
	JSR CONST		;TEST FOR INPUT
	CMP #$00		;IF NONE
	BEQ BD02B		;THEN SKIP
	JSR CONIN		;ELSE GET CHR
	JSR TSTCHR
BD02B	BIT STATUS		;CHECK STATUS FLAG
	BVC BD02X		;^S-FLAG ON
	JSR CONIN
	JSR TSTCHR
	LDA STATUS		;RESET ^S-FLAG
	AND #%10111111
	STA STATUS
BD02X	CLC
	RTS


BDOS03	RTS			;AUX INPUT


BDOS04	RTS			;AUX OUTPUT


BDOS05	JSR LIST		;LIST OUTPUT
	RTS


BDOS06	CMP #$FF		;DIRECT CONSOLE-I/O
	BEQ BD06A
	JSR CONOUT		;OUTPUT
	RTS

BD06A	JSR CONIN		;GET THE KEY
	RTS


BDOS07	RTS


BDOS08	RTS


BDOS09	STA BDOS1		;STRING OUTPUT
	STY BDOS1+1		;SET POINTER
	LDY #0			;SET FOR FIRST CHR
BD09A	LDA (BDOS1),Y
	CMP #EOT		;LAST CHR?
	BEQ BD09X
	JSR BDOS02		;PRINT CHR
	INY
	BNE BD09A
	INC BDOS1+1
	JMP BD09A

BD09X	CLC
	RTS


BDOS0A	LDY #1			;STRING INPUT
BD0AA	JSR BDOS01		;GET CHR
	CMP #CR	 		;END OF LINE?
	BNE BD0AC
BD0AG	LDA #LF	 		;INSERT LF
BD0AB	JSR CHROUT
	TYA
	LDY #0
	STA (INBUFV),Y		;SAVE CHR COUNT
	RTS

BD0AC	CMP #LF	 		;END OF LINE?
	BNE BD0AD
	LDA #CR	 		;INSERT CR
	BNE BD0AB

BD0AD	CMP #BS	 		;^H?
	BNE BD0AE
	DEY
	BNE BD0AA
	INY			;BEGIN OF LINE
	LDA #HT
	JSR CHROUT
	JMP BD0AA

BD0AE	CMP #HT	 		;HTAB?
	BNE BD0AF
	TYA
	LDY #0
	CMP (INBUFV),Y		;END OF LINE?
	TAY
	BCC BD0AE1
	LDA #BS
	JSR CHROUT		;1 CHR BACK
	JMP BD0AA
BD0AE1	INY
	BNE BD0AA

BD0AF	STA (INBUFV),Y		;SAVE CHR
	INY
	TYA
	LDY #0
	CMP (INBUFV),Y
	BCC BD0AH
	STA (INBUFV),Y
BD0AH	TAY
	BPL BD0AA		;MAX. 126 CHR
	DEY
	LDA #CR	 		;END OF LINE
	JSR CHROUT
	JMP BD0AG


BDOS0B	JSR CONST		;CHECK CONSOLE STATUS
	RTS


BDOS0C	JSR GETVER		;Get BIOS Version
	TAY
	LDA #VERSION		;Bios VER in Y, BDOS VER in A
	RTS


BDOS0D	LDA #0			;SELECT DEFAULT DRIVE
	STA STATUS		;RESET STATUS
	LDA DEFDRV
	JSR BD0EB		;DISK SELECT
	BCS BD0DX
	JSR HOME		;HOME DRIVE
	BCS BD0DX
	JSR SETVEC
BD0DX	RTS


BDOS0E	STA DEFDRV		;SET DEFAULT DRIVE
BD0EB	JSR SELDSK		;SELECT DRIVE
	BCS BD0EX
	LDY #YDPB		;SET DISK PARAMETERS
BD0EA	LDA (DPHV),Y
	STA SPB-YDPB,Y
	INY
	CPY #BATSIZ-SPB+YDPB+1
	BCC BD0EA
	LDA STATUS
	AND #%11110000		;reset BAT/DIR/FCB/DEL-Flags
	STA STATUS
	CLC
BD0EX	RTS


BDOS0F	LDA STATUS		;OPEN FILE	
	AND #%11110001		;RESET BAT-BIT/DIR-FLAG/FCB-FLAG
	STA STATUS
	LDA #0
	JSR GETEXT		;GET EXT NR. 0
	RTS


BDOS10	JSR FCBDIR		;CLOSE FILE
	JSR WDIR
	RTS


BDOS11	LDY #0			;SEARCH FOR 1. DIR ENTRY
	LDA (FCB1V),Y		;SET FOR DRIVE
	JSR SETDRV
	JSR BD0EB
	BCS BD11X
BD11A	JSR G1DIR		;GET 1.SECTOR
	BCS BD11X
BD11D	LDA #0			;RESET DIRPNT
BD11C	STA DIRPNT
	TAY
	LDA (DIRBFV),Y
	PHA
	LDA STATUS
	LSR A			;SEARCH DELETED ENTRY
	PLA
	BCS BD11F
	ASL A			;DELETED ?
	BCS BDOS12		;NEXT ENTRY
	JSR CMPFCB		;CHECK NAME
	BCS BD11B		;FOUND
BDOS12	LDA DIRPNT		;DIRPNT=DIRPNT+32
	CLC
	ADC #32
	BNE BD11C 
	JSR GNDIR		;NEXT SECTOR
	BCC BD11D
	CMP #EOD
	BNE BD11E
	LDA #NOTFND		;NO ENTRY FOUND
BD11E	SEC			;ERROR
BD11X	RTS

BD11F	ASL A			;DELETED?
	BCC BDOS12
BD11B	LDY DIRPNT		;FOUND
	CLC
	RTS


BDOS13	JSR BDOS11		;DELETE FILE
	BCS BD13X		;NOT FOUND
BD13A	LDA (DIRBFV),Y
	AND #%01000000		;READ ONLY?
	BNE BD13C
	LDA (DIRBFV),Y
	ORA #$80		;SET ERASED BIT
	STA (DIRBFV),Y
	LDA STATUS
	ORA #%00000100		;SET DIRFL
	AND #%11110111		;RESET BAT-BIT
	STA STATUS
	JSR BDOS12		;SEARCH NEXT ENTRY
	BCC BD13A
	CMP #NOTFND		;END OF DIR
	BNE BD13B
	CLC
	RTS

BD13C	LDA #RONLY		;READ ONLY
BD13B	SEC
BD13X	RTS


BDOS14	JSR RWPREP		;READ SEQUENTIAL
	BCS BD14X
	JSR RWINIT		;SET SECTOR
	JSR READ
	BCS BD14X
	JSR RWNEXT		;PREPARE FOR NEXT READ
BD14X	RTS


BDOS15	JSR RWPREP		;WRITE SEQUENTIAL
	BCC BD15A
	JSR APPEND		;APPEND 2 RECORD = 1 SECTOR
	BCS BD15X
BD15A	JSR RWINIT		;SET SECTOR
	JSR WRITE
	BCS BD15X
	JSR RWNEXT
	BCS BD15C
	RTS

BD15C	CMP #EOFILE		;NO MORE EXTENSION
	BNE BD15B
	LDA TEMP
	JSR NEWEXT		;OPEN NEW EXTENSION
	RTS

BD15B	SEC			;ERROR EXIT
BD15X	RTS


BDOS16	LDY #11 	;CREATE FILENAME
	LDA #'? 	;CHECK FOR ?
BD16A	CMP (FCB1V),Y
	BEQ BD17B
	DEY
	BNE BD16A
	JSR BDOS11	;DOUBLE ENTRY?
	BCC BD16C
	CMP #NOTFND
	BNE BD16D
	LDA #0
	JSR NEWEXT	;GET FREE ENTRY
	BCS BD16X
	LDY DIRPNT
BD16X	RTS

BD16C	LDA #DOUBLE
BD16D	SEC
	RTS


BDOS17	LDY #0		;RENAME FILE
	LDA (FCB2V),Y	;CHECK DRIVE NR
	BEQ BD17D
	CMP (FCB1V),Y
	BEQ BD17D
	BNE BD17B	;INVALID FCB

BD17D	LDA #'?
BD17C	INY		;SETUP FCB1, FCB2
	CPY #12
	BCS BD17A	;READY
	CMP (FCB1V),Y	;?
	BEQ BD17B	;ERROR
	CMP (FCB2V),Y	;?
	BNE BD17C
	LDA (FCB1V),Y
	STA (FCB2V),Y	;INSERT FCB1 CHR
	BNE BD17D	;BRA

BD17A	JSR XFCBV	;SWAP FCB-VECTORS
	JSR BDOS11	;CHECK FOR NEW NAME
	JSR XFCBV
	BCC BD17E	;DOUBLE ENTRY
	CMP #NOTFND
	BNE BD17I	;ERROR
	JSR BDOS11	;SEARCH ENTRY
	BCS BD17G
BD17H	JSR FCB2D	;copy FCB2 filename.ext to dir buffer
	JSR BDOS12	;SEARCH ALL EXTENTS
	BCC BD17H
	CMP #NOTFND
	BNE BD17I
	CLC
	RTS

BD17E	LDA #DOUBLE	;DOUBLE ENTRY
	DB BIT_ABS
BD17B	LDA #INVFCB	;INVALID FCB
BD17I	SEC
BD17G	RTS



BDOS18	RTS


BDOS19	LDA DEFDRV	;GET DEFAULT DRIVE
	CLC
	RTS


BDOS1A	PHA		;BIOS-CALL
	TYA		;A = Y*3
	AND #$3F	;max 64 BIOS functions
	STA TEMPA
	CLC
	ADC TEMPA
	ADC TEMPA
	STA BDOS1	;SET BDOS1
	LDA #FBIOS/256
	STA BDOS1+1
	PLA
	JMP (BDOS1)	;GO BIOS


BDOS1B	RTS


BDOS1C	RTS


BDOS1D	RTS


BDOS1E	RTS


BDOS1F	RTS

;======== SUBROUTINES =========

SETVEC	LDY #YDMAV+1	;SET DMAV, INBUF
SETVE1	LDA (DPHV),Y	;AND FCB VECTORS
	STA DIRBFV,Y
	DEY
	BPL SETVE1
	LDA #FCB1	;SET FCB1V
	STA FCB1V
	LDA #FCB1/256
	STA FCB1V+1
	LDA #FCB2	;SET FCB2V
	STA FCB2V
	LDA #FCB2/256
	STA FCB2V+1
	RTS


CHROUT	BIT STATUS	;TESTE ^P-FLAG
	BPL CHROU1
	PHA
	JSR LIST
	PLA
CHROU1	PHA
	JSR CONOUT
	PLA		;Check for CLS
	CMP #CLS
	BNE CHROUTX
	LDX #67
CHROUT4	LDA #$FF	;wait 120 ms
CHROUT3	SEC
	SBC #1
	BCS CHROUT3
	DEX
	BNE CHROUT4
CHROUTX	RTS


TSTCHR	AND #$7F	;7 Bit ASCII only
	CMP #$20	;TEST CHR
	BCC TSTCH1
TSTCHX	CLC
	RTS

TSTCH1	CMP #CR 	;CONTROL CODE FILTER
	BEQ TSTCHX
	CMP #LF
	BEQ TSTCHX
	CMP #BS
	BEQ TSTCHX
	CMP #HT
	BEQ TSTCHX
	CMP #CLS	;CLEAR SCREEN
	BEQ TSTCHX
	CMP #CTRLP
	BNE TSTCH2
	LDA #$80	;TOGGLE ^P-BIT
TSTCH4	EOR STATUS
	STA STATUS
TSTCH5	SEC
	RTS

TSTCH2	CMP #BREAK
	BNE TSTCH5
	BIT STATUS	;CHECK ^S-BIT
	BVC TSTCH3
	JMP BDOS00		;WARM START

TSTCH3	LDA #$40		;SET ^S-BIT
	BNE TSTCH4


SETDRV	TAY			;SET DRIVE NR
	BNE SETDR1
	LDA DEFDRV
	RTS

SETDR1	DEY
	TYA
	RTS


SETBD1B	LDY #YBAT		;SET BDOS1 = BAT
	LDA (DPHV),Y
	STA BDOS1
	INY
	LDA (DPHV),Y
	STA BDOS1+1
	RTS


SETBAT	JSR SETBD1B		;SET BLOCK ALLOC TABLE
	LDY BATSIZ		;RESET BAT
	LDA #0
SETBT1	STA (BDOS1),Y
	DEY
	BNE SETBT1
	LDX #DIRSCN-DIRPNT	;SAVE DIR-POINTERS
SETBT7	LDA DIRPNT,X
	PHA
	DEX
	BPL SETBT7
	LDA DIRMSK		;MASK DIR-BLOCKS
	STA (BDOS1),Y		;Y = 0!
	JSR G1DIR
	BCS SETBTX
SETBT5	LDY #0			;RESET DIRPNT
SETBT4	STY DIRPNT
	LDA (DIRBFV),Y		;GET FLAGBYTE
	AND #$80		;FILE DELETED?
	BNE SETBT2
	TYA			;SET Y ON 1. BLK
	CLC
	ADC #16
	TAY
	LDX #BPEXT		;max. 7 blocks per extent in 2.x
SETBT3	STX TEMPX		;save X
	LDA (DIRBFV),Y		;get blk nr in A/X  H/L
	TAX
	INY
	LDA (DIRBFV),Y
	BNE SETBT9		;blk nr=0?
	CPX #0
	BEQ SETBT2		;LAST BLOCK?
SETBT9	JSR UPDBAT		;UPDATE BAT-BIT
	INY
	LDX TEMPX
	DEX
	BPL SETBT3		;END OF EXTENT?
SETBT2	CLC			;SET DIRPNT FOR NEXT ENTRY
	LDA DIRPNT
	ADC #32
	TAY
	BNE SETBT4		;LAST ENTRY OF SECTOR?
	JSR GNDIR
	BCC SETBT5
	CMP #EOD		;END OF DIR?
	BNE SETBT6
	LDX #0			;RESTORE DIR-SECTOR
SETBT8	PLA
	STA DIRPNT,X
	INX
	CPX #DIRSCN-DIRPNT+1
	BCC SETBT8
	JSR RDIR
	BCS SETBTXX
	LDA STATUS		;SET BAT-BIT
	ORA #%00001000
	STA STATUS
	CLC
SETBTXX	RTS

SETBT6	SEC
SETBTX	TAY
	LDX #DIRSCN-DIRPNT	;restore stack pointer
SETBX7	PLA
	DEX
	BPL SETBX7
	TYA
	RTS


UPDBAT	STY TEMP		;UPDATE BAT-BIT  blk nr in A/X   H/L
	STX TEMPA
	LSR A			;CALC INDEX
	ROR TEMPA
	LSR A
	ROR TEMPA
	LSR A
	ROR TEMPA
	TXA
	AND #$07		;SETUP MASK BYTE
	TAY
	SEC
	LDA #0
UPDBT1	ROR A
	DEY
	BPL UPDBT1
	LDY TEMPA
	ORA (BDOS1),Y
	STA (BDOS1),Y
	LDY TEMP
	RTS


G1DIR	JSR CHKDFL		;READ 1. DIR-SECTOR
	BCS G1DIRX
	LDX #2
G1DIR1	LDA SYS,X		;Set DIRSEC=SYS
	STA DIRSEC,X
	DEX
	BPL G1DIR1
	INX
	STX DIRSCN		;DIRSCN = 0
	JSR RDIR		;READ SECTOR
G1DIRX	RTS


GNDIR	JSR CHKDFL		;GET NEXT DIR-SECTOR
	BCS GNDIRX
	INC DIRSCN
	LDA DIRSCN
	CMP DIRSCS		;EOD?
	BCS GNDIR2
	LDX #$FF		;INC DIRSEC
GNDIR1	INX
	INC DIRSEC,X
	BEQ GNDIR1
	JSR RDIR
GNDIRX	RTS

GNDIR2	LDA #EOD
	RTS


CHKDFL	LDA #%00000100		;CHECK DIR FLAG
	BIT STATUS
	BEQ CHKDF1
	JSR WDIR
	RTS

CHKDF1	CLC
	RTS


RDIR	JSR DIRPRE		;READ DIR-SECTOR
	JSR READ
	JSR VSWAP
	RTS


WDIR	LDA STATUS		;WRITE DIR-SECTOR
	AND #%11111011		;RESET DIRFL
	STA STATUS
	JSR DIRPRE
	JSR WRITE
	JSR VSWAP
	RTS


DIRPRE	LDX #2			;set sector to DIR-RW
DIRPRE1	LDA DIRSEC,X
	STA SECBUF,X
	DEX
	BPL DIRPRE1
	LDA #SECBUF
	JSR SETSEC
	JSR VSWAP
	RTS


VSWAP	LDY DMAV		;EXCHANGE DMAV WITH DIRBFV
	LDX DIRBFV
	STY DIRBFV
	STX DMAV
	LDY DMAV+1
	LDX DIRBFV+1
	STY DIRBFV+1
	STX DMAV+1
	RTS


CMPFCB	JSR SETBD1		;CMP FCB1 WITH (DIRBF)
	LDY #1
CMPFC2	LDA (FCB1V),Y
	CMP #'?
	BEQ CMPFC1
	CMP (BDOS1),Y
	BEQ CMPFC1
	CLC			;NO MATCH
	RTS

CMPFC1	INY
	CPY #12
	BCC CMPFC2
	RTS			;MATCH


FCBDIR	JSR SETBD1		;COPY FCB1 TO DIRBF
	LDY #1
FCBDI1	LDA (FCB1V),Y
	STA (BDOS1),Y
	INY
	CPY #32
	BCC FCBDI1
	LDA #0			;reset RC
	LDY #FCB_RC
	STA (BDOS1),Y
	INY
	STA (BDOS1),Y
FCBDI3	LDA STATUS
	AND #%11111101		;RESET FCB-FLAG
	ORA #%00000100		;SET DIRFL
	STA STATUS
	CLC
	RTS


FCB2D	LDY #11			;store fcb2 filename.ext to dirbuf
FCB2D1	LDA (FCB2V),Y		;for rename
	STA (BDOS1),Y
	DEY
	BNE FCB2D1
	BEQ FCBDI3		;reset fcb-flag, set dir-flag


DIRFCB	JSR SETBD1		;COPY DIRBF TO FCB1
	LDY #1
DIRFC1	LDA (BDOS1),Y
	STA (FCB1V),Y
	INY
	CPY #32
	BCC DIRFC1
	LDY #FCB_RC
	LDA #0
DIRFC2	STA (FCB1V),Y		;SET RC = 0
	INY
	STA (FCB1V),Y
	LDA STATUS
	AND #%11111101		;RESET FCB-FLAG
	STA STATUS
	RTS


SETBD1	CLC			;SET BDOS1 = DIRBF + DIRPNT
	LDA DIRBFV
	ADC DIRPNT
	STA BDOS1
	LDA DIRBFV+1
	ADC #0
	STA BDOS1+1
	RTS


XFCBV	LDX FCB1V		;EXCHANGE FCB1 WITH FCB2
	LDY FCB2V
	STY FCB1V
	STX FCB2V
	LDX FCB1V+1
	LDY FCB2V+1
	STY FCB1V+1
	STX FCB2V+1
	RTS


RWPREP	LDY #FCB_RC 		;PREPARE FOR R/W-BLOCK
	LDA (FCB1V),Y		;GET RC
	LDY #FCB_REC
	CMP (FCB1V),Y		;LENGTH < RC?
	BPL RWPRE2
	LSR A
	AND SPB 		;NEW BLOCK?
	BEQ RWPRE1
	CLC
	RTS

RWPRE1	JSR BLKOFS		;GET BLOCK OFFSET FOR FCB
	LDA (FCB1V),Y		;GET BLOCK
	TAX
	INY
	LDA (FCB1V),Y
	BNE RWPRE3
	CPX #0
	BEQ RWPRE2
RWPRE3	JSR SBTAB		;SET BLOCKTABLE
	RTS

RWPRE2	LDA #EOFILE
	SEC
	RTS


RWINIT	CLC			;INIT BLOCK-R/W
	ADC BLKBASE		;Base BLK + Sector
	STA SECBUF
	LDA BLKBASE+1
	ADC #0
	STA SECBUF+1
	LDA BLKBASE+2
	ADC #0
	STA SECBUF+2
	CLC
	LDA SECBUF
	ADC SYS			;+ SYS
	STA SECBUF
	LDA SECBUF+1
	ADC SYS+1
	STA SECBUF+1
	LDA SECBUF+2
	ADC SYS+2
	STA SECBUF+2
	LDA #SECBUF
	JSR SETSEC
	RTS


RWNEXT	LDY #FCB_RC		;PREPARE FOR NEXT BLOCK-R/W
	LDA (FCB1V),Y		;GET RC
	CLC
	ADC #2			;RC=RC+2!
	CMP RPEXT		;END OF EXTENT?
	BCS RWNEX2
	STA (FCB1V),Y
	RTS

RWNEX2	LDA #%00000010
	BIT STATUS		;CHECK FCB-FLAG
	BEQ RWNEX4
	JSR FCBDIR		;SAVE FCB1 to Dir-Buffer
	JSR WDIR
	BCS RWNEXX
RWNEX4	LDY #FCB_EXT
	LDA (FCB1V),Y
	CLC
	ADC #1			;EXT = EXT+1
	BCS RWNEX5
	JSR GETEXT		;GET NEXT EXTENSION
	BCS RWNEX3
	RTS

RWNEX3	CMP #NOTFND
	BNE RWNEXX
	LDA #EOFILE
	RTS

RWNEX5	LDA #FILOVR
RWNEXX	SEC
	RTS


GETEXT	STA TEMP		;GET EXTENT
	JSR BDOS11		;FIND EXTENSION
GETEX2	BCS GETEXX
	TYA
	CLC
	ADC #FCB_EXT
	TAY
	LDA TEMP		;CHECK EXTENT NR
	CMP (DIRBFV),Y
	BEQ GETEX1
	JSR BDOS12
	JMP GETEX2

GETEX1	JSR DIRFCB		;FOUND
	LDY DIRPNT
	CLC
GETEXX	RTS


SBTAB	STX BLKBASE		;SET SECTOR/BLOCK TABLE BLKNR A/X  H/L
	STA BLKBASE+1
	LDA #0
	STA BLKBASE+2
	LDY SPBDIV
SBTAB1	ASL BLKBASE
	ROL BLKBASE+1		;BLKNR*SPB
	ROL BLKBASE+2
	DEY
	BNE SBTAB1
	TYA			;A=0
	CLC
	RTS

	
APPEND	LDA STATUS		;SET FCB-FLAG
	ORA #%00000010
	STA STATUS
	LDY #FCB_REC		;get length
	LDA (FCB1V),Y
	PHA			;save length
	CLC
	ADC #2			;always +2 records
	STA (FCB1V),Y
	PLA
	LSR A
	AND SPB			;check for new block
	BEQ APPEN1
	CLC
	RTS

APPEN1	LDA #%00001000		;CHECK BAT-BIT
	BIT STATUS
	BNE APPEN3
	JSR SETBAT
	BCS APPENX
APPEN3	JSR FINDBL		;GET BLOCK NR A/X   H/L
	BCS APPENX
	PHA
	JSR BLKOFS		;GET BLOCK OFFSET IN FCB
	TXA
	STA (FCB1V),Y		;SET BLOCK L
	INY
	PLA
	STA (FCB1V),Y		;SET BLOCK H
	JSR SBTAB
APPENX	RTS


BLKOFS	LDY #FCB_RC 		;CALC BLK OFFSET FOR FCB
	LDA (FCB1V),Y		;GET RC
	LDY SPBDIV
BLKOF1	LSR A			;RC/SPB
	DEY
	BNE BLKOF1
	CLC
	ADC #16 		;+16
	TAY			;Y=OFFSET
	RTS


FINDBL	JSR FINDST		;FIND 1. BLOCK AVAILABLE
	JSR FIND0		;FIND BLK FREE
	BCS FINDB1
	ROL A			;ADJUST A
	JSR FIND1		;FIND BLK OCCUPIED
	INX			;1 step back
	CPX #8
	BCC FINDB2
	LDX #0
	INY
FINDB2	STY TEMP		;calc blk nr
	LDA #0
	ASL TEMP
	ROL A
	ASL TEMP
	ROL A
	ASL TEMP
	ROL A
	PHA			;push H
	STA TEMPA
	TXA
	ORA TEMP
	PHA			;push L
	TAX
	LDA TEMPA
	JSR UPDBAT
	PLA
	TAX
	PLA			;Blk nr in A/X   H/L
	CLC
	RTS

FINDB1	LDA #DSFULL		;DISK FULL
	RTS


FINDST	JSR SETBD1B		;FINDBL SETUP  SET BDOS1=BAT
	LDA BPD
	AND #$07
	STA TEMP
	LDY BATSIZ		;Y IS BAT-POINTER
	LDA (BDOS1),Y		;GET 1. BAT-BYTE
	LDX #7			;X IS BIT-POINTER
FINDS1	CPX TEMP		;GET 1. BAT-BIT
	BEQ FINDS2
	LSR A
	DEX
	BPL FINDS1
FINDS2	RTS


FIND0	LSR A			;FIND 0-BIT IN BAT
	BCC FIND0X
	JSR NXTBIT		;GET NEXT BIT
	BCC FIND0
FIND0X	RTS


FIND1	LSR A			;FIND 1-BIT IN BAT
	BCS FIND1X
	JSR NXTBIT
	BCC FIND1
FIND1X	RTS


NXTBIT	DEX			;DEC BLK COUNTER
	BPL NXTBI1
	LDX #7
	DEY
	CPY #$FF		;last BAT-BYTE searched?
	BEQ NXTBI2
	LDA (BDOS1),Y
NXTBI1	CLC
	RTS

NXTBI2	SEC
	RTS


NEWEXT	STA TEMP		;OPEN NEW EXTENSION
	LDA STATUS		;CREATE FILE
	ORA #%00000001		;SET DELFL
	STA STATUS
	JSR BD11A		;SEARCH FOR DELETED FILE
	PHA
	LDA STATUS
	AND #%11111110		;RESET DELFL
	STA STATUS
	PLA
	BCS NEWEX1
	LDA #0			;reset DEL Flag
	STA (DIRBFV),Y
	LDY #FCB_RC
NEWEX3	STA (FCB1V),Y		;RC AND BLOCKS = 0
	INY
	CPY #32
	BCC NEWEX3
	LDA TEMP		;set extent nr
	LDY #FCB_EXT
	STA (FCB1V),Y
	JSR FCBDIR		;copy FCB1 to DIRBUF
	CLC
NEWEXX	RTS

NEWEX1	CMP #NOTFND		;DIR FULL?
	BNE NEWEX2
	LDA #DRFULL
	RTS

NEWEX2	SEC
	RTS


	END
