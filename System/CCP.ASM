;CP/M-65 CCP

;D. LAUSBERG		(C) 1988
;V1.1	14.6.90
;V1.2	20.11.91	ASM-65 Version
;V1.3	20.02.95	new memory map
;V1.4	16.04.95	some corrections
;V1.5	16.07.95	improved SETFCB

;====================================

;PAGE 00 CELLS

DMAV	= $FE
FCB1V	= $F6
FCB2V	= $F4
BDOS	= $F0		;JMP TO BDOS
INBUFV	= $EC
CMDMAX	= $E3
CMDVEC	= $E2
CCPV	= $E0		;CCP VECTOR

;SYSTEM CONSTANTS

BEGIN	= $D800

TPA	= $0200		;TPA
BDOSST	= $DC00		;BDOS START

;BDOS CALLS

CONIN	= $01
CHROUT	= $02
STROUT	= $09
GETLIN	= $0A
SELDRV	= $0E
OPEN	= $0F
RDSEQ	= $14
DEFDRV	= $19

;CONTROL CODES

EOT	= $00
CR	= $0D
LF	= $0A
SPACE	= $20

;ERROR CODES

NOCOM	= $C0
ILLPAR	= $C1
EOL	= $C2
EOF	= $D7
NOTFND	= $DD

;====================================

	ORG BEGIN

	JMP BDOSST	;BDOS JMP

CCP	LDX #DEFDRV	;GET DEFAULT DRIVE
	JSR BDOS
	ADC #$41
	STA DRIVEC
	LDA #PROMPT
	LDY #PROMPT/256
	JSR PRTSTR	;DISPLAY PROMPT
	LDA #INBUF	;SET INBUFV
	STA INBUFV
	LDA #INBUF/256
	STA INBUFV+1
	LDA CFLAG	;CHECK FOR COMMAND FLAG
	BNE CCP1
	LDX #GETLIN
	JSR BDOS	;GET LINE FROM CONSOLE
	JMP CCP2

CCP1	JSR PRLINE	;PRINT LINE IN INBUF
CCP2	LDX #2		;SET FCB1
	LDY #1
	STY CMDVEC
	DEY
	LDA (INBUFV),Y
	STA CMDMAX
	JSR SETFCB
	BCS CCPX
	JSR EXEC	;EXEC COMMAND
	BCS CCP4	;SKIP EXECUTION
	JSR TPA 	;START PROGRAM AT TPA
CCP3	LDX #0
	JMP BDOS	;WARM BOOT

CCP4	CMP #0
	BEQ CCP3
	CMP #SPACE
	BNE CCPX
	LDY #0		;SELECT DRIVE
	LDA (FCB1V),Y
	BEQ CCP3	;NO INPUT
	SBC #1		;adjust drive nr
	LDX #SELDRV	;LOGIN
	JSR BDOS
	BCC CCP3
CCPX	JSR ERROR
	JMP CCP3

;==== SUBROUTINES ========================

EXEC	LDY #1		;CHECK FOR *.COM
	LDA #SPACE
	CMP (FCB1V),Y	;CHECK FOR NO FILENAME
	BEQ EXECX	;on equal C=1
	LDY #9		;CHECK FOR SPACE
	CMP (FCB1V),Y
	BNE EXEC4	;EXT must be empty
	LDA #'? 	;CHECK FOR '?
EXEC6	CMP (FCB1V),Y
	BEQ EXEC4
	DEY
	BNE EXEC6
	JSR LDFILE	;LOAD FILE
	BCS EXECX
	LDA CMDVEC
	PHA		;SAVE CMD POINTER
	LDX #2		;SET FCB1
	JSR SETFCB
	LDX #0		;SET FCB2
	JSR SETFCB
	PLA
	STA CMDVEC
	JSR FILDMA	;FILL CMD-STRING IN DMA
	CLC
EXECX	RTS

EXEC4	LDA #NOCOM
	SEC
	RTS


PRLINE	LDY #0		;PRINT LINE IN BUFFER
	STY CFLAG	;RESET COMMAND FLAG
	LDA (INBUFV),Y	;GET LENGTH
	STA CMDMAX
PRLIN1	INY
	LDA (INBUFV),Y	;get CHR	
	JSR PRTCHR
	CPY CMDMAX
	BCC PRLIN1
PRLINX	RTS


SETDMA	LDA DMAV	;SET DMA=TPA
	STA CCPV	;SAVE OLD DMAV
	LDA DMAV+1
	STA CCPV+1
	LDA #TPA
	STA DMAV
	LDA #TPA/256
	STA DMAV+1
	RTS


RESDMA	LDA CCPV+1	;RESET DMA
	STA DMAV+1
	LDA CCPV
	STA DMAV
	RTS


FILDMA	LDX #0			;FILL DMA WITH ARGUMENT
FILDM1	INX
	LDY CMDVEC
	CPY CMDMAX
	BCS FILDM2
	LDA (INBUFV),Y		;GET CHR
	PHA
	TXA
	TAY
	PLA
	STA (DMAV),Y		;PUT CHR TO DMA
	INC CMDVEC
	BNE FILDM1

FILDM2	TXA			;SET LENGTH
	LDY #0
	STA (DMAV),Y
	RTS


LDFILE	LDA #'C			;LOAD *.COM FILE
	LDY #9
	STA (FCB1V),Y		;SET EXT TO COM
	INY
	LDA #'O
	STA (FCB1V),Y
	INY
	LDA #'M
	STA (FCB1V),Y
LDFIL3	LDX #OPEN		;OPEN FILE
	JSR BDOS
	BCC LDFIL1
LDFIL2	JSR ERROR
	BCC LDFIL3
	LDA #0
	RTS

LDFIL1	JSR SETDMA		;SET DMA=TPA
LDFIL5	LDX #RDSEQ		;READ A SECTOR
	JSR BDOS
	BCS LDFIL4
	INC DMAV+1		;INC DMA PAGE
	BNE LDFIL5		;branch allways

LDFIL4	CMP #EOF		;WAS IT A EOF?
	BNE LDFIL2
LDFIL6	JSR RESDMA		;RESET DMA
	CLC
	RTS


SETFCB	JSR SECCPV		;SET CCPV TO FCBX
	JSR RESFCB		;RESET FCBX
	TAX			;X is FCB pointer
	INX
	LDY CMDVEC		;GET NEXT CHR, SKIP SPACES
SETFCB3	CPY CMDMAX
	BCS SETFCB2
	LDA (INBUFV),Y
	STY CMDVEC
	INY
	CMP #SPACE
	BEQ SETFCB3
	CPY CMDMAX
	BCS SETFCB2
	LDA (INBUFV),Y
	CMP #':
	BNE SETFCB2
	DEY
	LDA (INBUFV),Y		;get drive chr
	AND #$5F		;upper case
	CMP #'A
	BCC SETFCB6
	CMP #'I
	BCS SETFCB6
	AND #$0F
	LDY #0
	STA (CCPV),Y		;set drive byte
	INC CMDVEC
	INC CMDVEC
SETFCB2	JSR GNCHR		;get next chr
	BCS SETFCB7
	PHA
	TXA
	TAY			;set Y=FCB pointer
	PLA
	CMP #'.
	BEQ SETFCB4
	CMP #'*
	BNE SETFCB9
	LDA #'?
	CPY #8
	BEQ SETFCB9
	CPY #11
	BCS SETFCB9
	DEC CMDVEC
SETFCB9	STA (CCPV),Y
SETFC11	INX
	CPY #8
	BNE SETFCB1
	JSR GNCHR		;after 8 chr's there must be a '.
	BCS SETFCB7		;or a valid end of filename
	CMP #'.
	BNE SETFCB5
SETFCB1	CPX #13
	BCC SETFCB2
SETFCB5	JSR RESFCB
SETFCB6	LDA #ILLPAR
	SEC
	RTS

SETFCB4	CPY #9			;process '.
	BCS SETFCB5
	LDX #9
	BNE SETFCB2

SETFCB7	CMP #SPACE			;check for end of filename
	BEQ SETFCB8
	CMP #EOL
	BNE SETFCB5
SETFCB8	CLC
	RTS


GNCHR	LDY CMDVEC		;GET NEXT CHR FROM INBUF
	CPY CMDMAX
	BCS GNCHR1
	LDA (INBUFV),Y
	INC CMDVEC
CHRCHK	LDY #KEYTX-KEYTAB-1 	;CHECK FOR VALID CHR
GNCHR2	CMP KEYTAB,Y		;check KEYTAB first
	BEQ GNCHR3
	DEY
	BPL GNCHR2
	CMP #'-
	BCC GNCHR5		;-./0123456789
	CMP #':
	BCC GNCHR4
	AND #$5F		;LOWER TO UPPER CASE
	CMP #'A			;A..Z
	BCC GNCHR5
	CMP #'[
GNCHR4	RTS

GNCHR3	CLC
	RTS

GNCHR1	LDA #EOL
GNCHR5	SEC
	RTS


SECCPV	LDA FCB2V,X	;SET CCPV FOR FCBX
	STA CCPV
	INX
	LDA FCB2V,X
	STA CCPV+1
	RTS


RESFCB	LDY #11 	;RESET FCB
	LDA #SPACE
RESFC1	STA (CCPV),Y
	DEY
	BNE RESFC1
	TYA
	STA (CCPV),Y	;SET DRIVE NR
	RTS


ERROR	STA ERRNO	;ERROR ROUTINE
	JSR CRLF
	LDA #ERRTAB	;SET CCPV
	STA CCPV
	LDA #ERRTAB/256
	STA CCPV+1
	LDY #0		;CHECK ERROR CODE
	LDA (CCPV),Y
ERROR1	BEQ ERROR4	;END OF ERROR ROUTINE
	CMP ERRNO
	BEQ ERROR3
ERROR2	JSR INCCPV	;SKIP ERROR MESSAGE
	BNE ERROR2
	JSR INCCPV
	JMP ERROR1

ERROR3	JSR INCCPV
	PHA
	JSR ERRTYP	;PRINT ERROR TYPE
	JSR INCCPV
	LDA CCPV	;PRINT ERROR MESSAGE
	LDY CCPV+1
	JSR PRTSTR
	PLA
	BPL ERROR5
	JSR ASKRTY	;ASK FOR RETRY
	LDA ERRNO
	RTS

ERROR4	JSR UETYP	;UNKNOWN ERROR
ERROR5	SEC
	RTS


ERRTYP	LDY #0		;PRINT ERROR TYPE
ERRTY1	LSR A		;SHIFT SOURCE BIT IN C
	BCS ERRTY2
	INY		;Y=Y+5
	INY
	INY
	INY
	INY
	BNE ERRTY1

ERRTY2	LDA ETYPTB,Y
	BEQ UETYP	;LAST CHR?
	JSR PRTCHR
	INY
	BNE ERRTY2

UETYP	LDA #ERRM1
	LDY #ERRM1/256
	JSR PRTSTR
	LDA ERRNO
	JSR PRTHEX

CRLF	LDA #CRLFM	;PRINTS A NEWLINE
	LDY #CRLFM/256

PRTSTR	LDX #STROUT
	JMP BDOS


PRTCHR	LDX #CHROUT	;PRINTS A CHR
	JMP BDOS


INCCPV	INC CCPV	;INC CCPV
	BNE INCCP1
	INC CCPV+1
INCCP1	LDA (CCPV),Y
	RTS


ASKRTY	LDA #RTYMES	;RETRY?
	LDY #RTYMES/256
	JSR PRTSTR
	LDX #CONIN
	JSR BDOS
	JSR CHRCHK
	CMP #'Y
	BNE ASKRT1
	CLC
	RTS

ASKRT1	SEC
	RTS


PRTHEX	PHA		;PRINTS A HEX NUMBER
	LSR A
	LSR A
	LSR A
	LSR A
	JSR PRTNIB	;PRINT NIBBLE
	PLA
	AND #$0F

PRTNIB	CMP #$0A
	BCC PRTNI1
	ADC #6
PRTNI1	ADC #$30
	JSR PRTCHR
	RTS

;==== DATA AREA ===================

ERRNO	DB $00

;--- Tables ---

KEYTAB	DB '!#$&*+?@^_'
KEYTX	

;==== MESSAGES ====================

PROMPT	DB CR,LF
DRIVEC	DB 'B>',EOT
CRLFM	DB CR,LF,EOT

;==================================

ERRM1	DB ' Error $',EOT
RTYMES	DB CR,LF,'Retry	(Y/N) ? ',EOT

ETYPTB	DB 'BIOS',$00,'BDOS',$00,'CCP',$00,$00
	DB 'RSX',$00,$00,'USER',$00

ERRTAB	DB $FE,$01,'CRC Error',EOT
	DB $FD,$81,'Drive not ready',EOT
	DB $FB,$81,'Sector not found',EOT
	DB $F9,$01,'Invalid Drive',EOT
	DB $DD,$82,'File not found',EOT
	DB $D9,$02,'Invalid FCB',EOT
	DB $C1,$04,'Syntax Error',EOT
	DB $C0,$04,'No Command',EOT

	DB $00


CFLAG	DB $00
INBUF	DS 128

	END
