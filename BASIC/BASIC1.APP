;BASIC1.APP
;BASIC.COM  Microsoft compatible 6502 BASIC
;APPEND FILE 1
;D. Lausberg	(c) 1995
;V1.0	08.04.95
;V1.4	06.03.96
;V1.4a	10.05.21		;CHRIN AND #$7F

CHR	JSR TRMCAL1		;CHR$ COMMAND
	TXA
	PHA
	LDA #1
	JSR GSTRP1
	PLA
	LDY #0
	STA (F_ACCU1+1),Y
	PLA
	PLA
	JMP S_STR10


LEFT	JSR GS_PAR		;LEFT$ COMMAND
	CMP (GCMEM),Y
	TYA
LEFT3	BCC LEFT1
	LDA (GCMEM),Y
	TAX
	TYA
LEFT1	PHA
LEFT4	TXA
LEFT5	PHA
	JSR GSTRP1
	LDA GCMEM
	LDY GCMEM+1
	JSR GARCOL2
	PLA
	TAY
	PLA
	CLC
	ADC T_PNT
	STA T_PNT
	BCC LEFT2
	INC T_PNT+1
LEFT2	TYA
	JSR P_STR1
	JMP S_STR10


RIGHT	JSR GS_PAR		;RIGHT$ COMMAND
	CLC
	SBC (GCMEM),Y
	EOR #$FF
	JMP LEFT3


MID	LDA #$FF		;MID$ COMMAND
	STA F_ACCU1+4
	JSR GETCHR1
	CMP #')
	BEQ MID1
	JSR CHK_KM
	JSR TRMCALC
MID1	JSR GS_PAR
	BEQ ASC_ERR		;--> ILLEGAL QUANTITY ERROR
	DEX
	TXA
	PHA
	CLC
	LDY #0
	SBC (GCMEM),Y
	BCS LEFT4
	EOR #$FF
	CMP F_ACCU1+4
	BCC LEFT5
	LDA F_ACCU1+4
	BCS LEFT5


GS_PAR	JSR CHK_29		;GET STRING PARAMETER FROM STACK
	PLA
	TAY
	PLA
	STA J_FN+1
	PLA
	PLA
	PLA
	TAX
	PLA
	STA GCMEM
	PLA
	STA GCMEM+1
	LDA J_FN+1
	PHA
	TYA
	PHA
	LDY #0
	TXA
	RTS


LEN	JSR GS_LA		;LEN COMMAND
	JMP POS1


GS_LA	JSR GARCOL		;GET STRING LENGTH AND ADDRESS
	LDX #0
	STX VAR_F
	TAY
	RTS


ASC	JSR GS_LA		;ASC COMMAND
	BEQ ASC_ERR
	LDY #0
	LDA (T_PNT),Y
	TAY
	JMP POS1

ASC_ERR	JMP ILLQ_ERR		;ILLEGAL QUANTITY ERROR


TRMCAL0	JSR GETCHR		;READ NR FROM BASIC TEXT
TRMCALC	JSR ANALYZE
TRMCAL1	JSR NR_INT1
	LDX F_ACCU1+3
	BNE ASC_ERR
	LDX F_ACCU1+4
	JMP GETCHR1


VAL	JSR GS_LA		;VAL COMMAND
	BNE VAL1
	JMP PLUS20
VAL1	LDX CHRGTP
	LDY CHRGTP+1
	STX P_FUNC
	STY P_FUNC+1
	LDX T_PNT
	STX CHRGTP
	CLC
	ADC T_PNT
	STA PNT
	LDX T_PNT+1
	STX CHRGTP+1
	BCC VAL2
	INX
VAL2	STX PNT+1
	LDY #0
	LDA (PNT),Y
	PHA
	TYA			;=LDA #0
	STA (PNT),Y
	JSR GETCHR1
	JSR STR_VAL
	PLA
	LDY #0
	STA (PNT),Y
VAL8	LDX P_FUNC
	LDY P_FUNC+1
	STX CHRGTP
	STY CHRGTP+1
	RTS


G_2NR	JSR ANALYZE		;GET 2 NR (16 BIT/ 8 BIT) FROM
	JSR A1_INT		;BASIC LINE
G2NR1	JSR CHK_KM
	JMP TRMCALC


A1_INT	LDA F_ACCU1+5		;ACCU1 TO 16 BIT INT CONVERSION
	BMI ASC_ERR
	LDA F_ACCU1
	CMP #$91
	BCS ASC_ERR
	JSR FN_INT
	LDA F_ACCU1+3
	LDY F_ACCU1+4
	STY BASADR
	STA BASADR+1
	RTS


PEEK	LDA BASADR+1		;PEEK COMMAND
	PHA
	LDA BASADR
	PHA
	JSR A1_INT
	LDY #0
	LDA (BASADR),Y
	TAY
	PLA
	STA BASADR
	PLA
	STA BASADR+1
	JMP POS1


POKE	JSR G_2NR		;POKE COMMAND
	TXA
	LDY #0
	STA (BASADR),Y
POKEX	RTS


WAIT	JSR TRMCAL0		;WAIT COMMAND
WAIT3	LDX #$64		;100 MS LOOP
WAIT2	LDY #$C0
WAIT1	DEY
	BNE WAIT1
	DEX
	BPL WAIT2
	DEC F_ACCU1+4
	BNE WAIT3
	JMP CHK_29


SYS	JSR ANALYZE		;SYS COMMAND
	JSR A1_INT
	JMP (BASADR)


A1_P05	LDA #CON_TAB		;ACCU1 + 0.5
	LDY #CON_TAB/256
	JMP V_PA1


MINUS0	JSR P_A2		;VARIABLE (A/Y) - ACCU1
MINUS	LDA F_ACCU1+5		;- OPERATOR
	EOR #$FF
	STA F_ACCU1+5
	EOR F_ACCU2+5
	STA ACOMP
	LDA F_ACCU1
	JMP PLUS0


V_PA10	JSR BMUL10
	BCC PLUS10
V_PA1	JSR P_A2		;VAR (A/Y) + ACCU1
PLUS0	BNE PLUS
	JMP A2_A1
PLUS	LDX ARND		;+ OPERATOR
	STX J_FN+2
	LDX #F_ACCU2
	LDA F_ACCU2
PLUS1	TAY
	BEQ POKEX
	SEC
	SBC F_ACCU1
	BEQ PLUS10
	BCC PLUS2
	STY F_ACCU1
	LDY F_ACCU2+5
	STY F_ACCU1+5
	EOR #$FF
	ADC #0
	LDY #0
	STY J_FN+2
	LDX #F_ACCU1
	BNE PLUS3
PLUS2	LDY #0
	STY ARND
PLUS3	CMP #$F9
	BMI V_PA10
	TAY
	LDA ARND
	LSR ZERO+1,X
	JSR BMUL15
PLUS10	BIT ACOMP
	BPL PLUS23
	LDY #F_ACCU1
	CPX #F_ACCU2
	BEQ PLUS11
	LDY #F_ACCU2
PLUS11	SEC
	EOR #$FF
	ADC J_FN+2
	STA ARND
	LDA 4,Y
	SBC 4,X
	STA F_ACCU1+4
	LDA 3,Y
	SBC 3,X
	STA F_ACCU1+3
	LDA 2,Y
	SBC 2,X
	STA F_ACCU1+2
	LDA 1,Y
	SBC 1,X
	STA F_ACCU1+1
PLUS12	BCS PLUS13
	JSR A1_C		;COMPLEMENT A1
PLUS13	LDY #0
	TYA
	CLC
PLUS14	LDX F_ACCU1+1
	BNE A1_N1
	LDX F_ACCU1+2
	STX F_ACCU1+1
	LDX F_ACCU1+3
	STX F_ACCU1+2
	LDX F_ACCU1+4
	STX F_ACCU1+3
	LDX ARND
	STX F_ACCU1+4
	STY ARND
	ADC #$08
	CMP #$20
	BNE PLUS14
PLUS20	LDA #0
PLUS21	STA F_ACCU1
PLUS22	STA F_ACCU1+5
	RTS

PLUS23	ADC J_FN+2
	STA ARND
	LDA F_ACCU1+4
	ADC F_ACCU2+4
	STA F_ACCU1+4
	LDA F_ACCU1+3
	ADC F_ACCU2+3
	STA F_ACCU1+3
	LDA F_ACCU1+2
	ADC F_ACCU2+2
	STA F_ACCU1+2
	LDA F_ACCU1+1
	ADC F_ACCU2+1
	STA F_ACCU1+1
	JMP A1_N2


A1_N	ADC #1			;NORMALIZE ACCU1
	ASL ARND
	ROL F_ACCU1+4
	ROL F_ACCU1+3
	ROL F_ACCU1+2
	ROL F_ACCU1+1
A1_N1	BPL A1_N
	SEC
	SBC F_ACCU1
	BCS PLUS20
	EOR #$FF
	ADC #1
	STA F_ACCU1
A1_N2	BCC A1_NX
A1_N3	INC F_ACCU1
	BEQ OVF_ERR
	ROR F_ACCU1+1
	ROR F_ACCU1+2
	ROR F_ACCU1+3
	ROR F_ACCU1+4
	ROR ARND
A1_NX	RTS


A1_C	LDA F_ACCU1+5		;COMPLEMENT ACCU1
	EOR #$FF
	STA F_ACCU1+5
A1_C1	LDA F_ACCU1+1
	EOR #$FF
	STA F_ACCU1+1
	LDA F_ACCU1+2
	EOR #$FF
	STA F_ACCU1+2
	LDA F_ACCU1+3
	EOR #$FF
	STA F_ACCU1+3
	LDA F_ACCU1+4
	EOR #$FF
	STA F_ACCU1+4
	LDA ARND
	EOR #$FF
	STA ARND
	INC ARND
	BNE A1_CX
A1_C2	INC F_ACCU1+4
	BNE A1_CX
	INC F_ACCU1+3
	BNE A1_CX
	INC F_ACCU1+2
	BNE A1_CX
	INC F_ACCU1+1
A1_CX	RTS


OVF_ERR	LDX #ERR5-ERR_TAB
	JMP ERROR


BMUL	LDX #REG-1		;BYTE MULTIPLY
BMUL1	LDY 4,X
	STY ARND
	LDY 3,X
	STY 4,X
	LDY 2,X
	STY 3,X
	LDY 1,X
	STY 2,X
	LDY F_ACCU1+7
	STY 1,X
BMUL10	ADC #8
	BMI BMUL1
	BEQ BMUL1
	SBC #8
	TAY
	LDA ARND
	BCS BMUL2
BMUL4	ASL 1,X
	BCC BMUL3
	INC 1,X
BMUL3	ROR 1,X
	ROR 1,X
BMUL15	ROR 2,X
	ROR 3,X
	ROR 4,X
	ROR A
	INY
	BNE BMUL4
BMUL2	CLC
	RTS


LOG	JSR CHK_A1S		;LOG COMMAND
	BEQ LOG1
	BPL LOG2
LOG1	JMP ILLQ_ERR		;ILLEGAL QUANTITY ERROR
LOG2	LDA F_ACCU1
	SBC #$7F
	PHA
	LDA #$80
	STA F_ACCU1
	LDA #F_LOG1
	LDY #F_LOG1/256
	JSR V_PA1		;F_LOG1 + ACCU1
	LDA #F_LOG2
	LDY #F_LOG2/256
	JSR DIV0		;F_LOG2 / ACCU1
	LDA #F_CONST
	LDY #F_CONST/256
	JSR MINUS0		;F_CONST - ACCU1
	LDA #F_LOG3
	LDY #F_LOG3/256
	JSR F_SUB		;FUNCTION SUBROUTINE
	LDA #F_LOG4
	LDY #F_LOG4/256
	JSR V_PA1		;F_LOG4 + ACCU1
	PLA
	JSR RD_ASCNR		;READ '0..9'
	LDA #F_LOG5
	LDY #F_LOG5/256

MUL0	JSR P_A2		;VARIABLE (A/Y) * ACCU1
MUL	BNE MUL1		;* OPERATOR
	JMP BITMULX
MUL1	JSR ACORR
	LDA #0
	STA REG
	STA REG+1
	STA REG+2
	STA REG+3
	LDA ARND
	JSR BITMUL
	LDA F_ACCU1+4
	JSR BITMUL
	LDA F_ACCU1+3
	JSR BITMUL
	LDA F_ACCU1+2
	JSR BITMUL
	LDA F_ACCU1+1
	JSR BITMUL1
	JMP REG_A1


BITMUL	BNE BITMUL1		;BIT MULTIPLY
	JMP BMUL
BITMUL1	LSR A
	ORA #$80
BITMUL3	TAY
	BCC BITMUL2
	CLC
	LDA REG+3
	ADC F_ACCU2+4
	STA REG+3
	LDA REG+2
	ADC F_ACCU2+3
	STA REG+2
	LDA REG+1
	ADC F_ACCU2+2
	STA REG+1
	LDA REG
	ADC F_ACCU2+1
	STA REG
BITMUL2	ROR REG
	ROR REG+1
	ROR REG+2
	ROR REG+3
	ROR ARND
	TYA
	LSR A
	BNE BITMUL3
BITMULX	RTS


P_A2	STA T_PNT		;PUSH (A/Y) TO ACCU2
	STY T_PNT+1
	LDY #4
	LDA (T_PNT),Y
	STA F_ACCU2+4
	DEY
	LDA (T_PNT),Y
	STA F_ACCU2+3
	DEY
	LDA (T_PNT),Y
	STA F_ACCU2+2
	DEY
	LDA (T_PNT),Y
	STA F_ACCU2+5
	EOR F_ACCU1+5
	STA ACOMP
	LDA F_ACCU2+5
	ORA #$80
	STA F_ACCU2+1
	DEY
	LDA (T_PNT),Y
	STA F_ACCU2
	LDA F_ACCU1
	RTS


ACORR	LDA F_ACCU2		;CORRECTION OF ACCU1 AND ACCU2
ACORR0	BEQ ACORR5
	CLC
	ADC F_ACCU1
	BCC ACORR1
	BMI ACORR6
	CLC
	DB BIT_ABS
ACORR1	BPL ACORR5
	ADC #$80
	STA F_ACCU1
	BEQ ACORR2
	LDA ACOMP
ACORR2	STA F_ACCU1+5
	RTS

ACORR3	LDA F_ACCU1+5		;OVER- AND UNDERFLOW HANDLING
	EOR #$FF
	BMI ACORR6
ACORR5	PLA
	PLA
	JMP PLUS20

ACORR6	JMP OVF_ERR


A1MUL10	JSR A1_A2		;ACCU1 * 10
	TAX
	BEQ A1MUL1X
	CLC
	ADC #2			;ACCU1 * 4
	BCS ACORR6		;OVERFLOW ERROR
A1MUL1A	LDX #0
	STX ACOMP
	JSR PLUS1		;+ ACCU1 = 5*ACCU1 !!!
	INC F_ACCU1		;ACCU1 * 2
	BEQ ACORR6
A1MUL1X	RTS


A1DIV10	JSR A1_A2		;ACCU1 / 10
	LDA #F_10
	LDY #F_10/256
	LDX #0
A1D10A	STX ACOMP
	JSR FIL_A1
	JMP DIV


DIV0	JSR P_A2		;(A/Y) / ACCU1
DIV	BEQ DIV0_ERR		;/ OPERATOR
	JSR A1RND
	LDA #0
	SEC
	SBC F_ACCU1
	STA F_ACCU1
	JSR ACORR
	INC F_ACCU1
	BEQ ACORR6		;OVERFLOW ERROR
	LDX #$FC		;$00-4 = INDEX FOR REG
	LDA #$01
DIV5	LDY F_ACCU2+1
	CPY F_ACCU1+1
	BNE DIV1
	LDY F_ACCU2+2
	CPY F_ACCU1+2
	BNE DIV1
	LDY F_ACCU2+3
	CPY F_ACCU1+3
	BNE DIV1
	LDY F_ACCU2+4
	CPY F_ACCU1+4
DIV1	PHP
	ROL A
	BCC DIV2
	INX
	STA REG+3,X
	BEQ DIV8
	BPL DIV9
	LDA #$01
DIV2	PLP
	BCS DIV3
DIV4	ASL F_ACCU2+4
	ROL F_ACCU2+3
	ROL F_ACCU2+2
	ROL F_ACCU2+1
	BCS DIV1
	BMI DIV5
	BPL DIV1

DIV3	TAY
	LDA F_ACCU2+4
	SBC F_ACCU1+4
	STA F_ACCU2+4
	LDA F_ACCU2+3
	SBC F_ACCU1+3
	STA F_ACCU2+3
	LDA F_ACCU2+2
	SBC F_ACCU1+2
	STA F_ACCU2+2
	LDA F_ACCU2+1
	SBC F_ACCU1+1
	STA F_ACCU2+1
	TYA
	JMP DIV4

DIV8	LDA #$40
	BNE DIV2

DIV9	ASL A
	ASL A
	ASL A
	ASL A
	ASL A
	ASL A
	STA ARND
	PLP
	JMP REG_A1

DIV0_ERR LDX #ERR10-ERR_TAB	;DIVISION BY 0 ERROR
	JMP ERROR


REG_A1	LDA REG			;COPY REG TO ACCU1
	STA F_ACCU1+1
	LDA REG+1
	STA F_ACCU1+2
	LDA REG+2
	STA F_ACCU1+3
	LDA REG+3
	STA F_ACCU1+4
	JMP PLUS13


FIL_A1	STA T_PNT		;(A/Y) TO ACCU1
	STY T_PNT+1
	LDY #4
	LDA (T_PNT),Y
	STA F_ACCU1+4
	DEY
	LDA (T_PNT),Y
	STA F_ACCU1+3
	DEY
	LDA (T_PNT),Y
	STA F_ACCU1+2
	DEY
	LDA (T_PNT),Y
	STA F_ACCU1+5
	ORA #$80
	STA F_ACCU1+1
	DEY
	LDA (T_PNT),Y
	STA F_ACCU1
	STY ARND
	RTS


A1_BUF2	LDX #BUF2		;ACCU1 TO BUF2
	DB BIT_ABS
A1_BUF1	LDX #BUF1		;ACCU1 TO BUF1
	LDY #0
	BEQ A1_FOR1

A1_FOR	LDX P_FORL		;ACCU1 TO CURRENT FOR-NEXT VARIABLE
	LDY P_FORL+1
A1_FOR1	JSR A1RND
	STX T_PNT
	STY T_PNT+1
	LDY #4
	LDA F_ACCU1+4
	STA (T_PNT),Y
	DEY
	LDA F_ACCU1+3
	STA (T_PNT),Y
	DEY
	LDA F_ACCU1+2
	STA (T_PNT),Y
	DEY
	LDA F_ACCU1+5
	ORA #$7F
	AND F_ACCU1+1
	STA (T_PNT),Y
	DEY
	LDA F_ACCU1
	STA (T_PNT),Y
	STY ARND
	RTS


A2_A1	LDA F_ACCU2+5		;COPY ACCU2 TO ACCU1
A2_A11	STA F_ACCU1+5
	LDX #5
A2_A12	LDA F_ACCU2-1,X
	STA F_ACCU1-1,X
	DEX
	BNE A2_A12
A2_A13	STX ARND
A2_A14	RTS


A1_A2	JSR A1RND		;COPY ACCU1 TO ACCU2
A1_A21	LDX #6
A1_A22	LDA F_ACCU1-1,X
	STA F_ACCU2-1,X
	DEX
	BNE A1_A22
	BEQ A2_A13


A1RND	LDA F_ACCU1		;ROUND ACCU1
	BEQ A2_A14
	ASL ARND
	BCC A2_A14
A1RND1	JSR A1_C2
	BNE A2_A14
	JMP A1_N3


CHK_A1S	LDA F_ACCU1		;CHECK ACCU1 SIGN
	BEQ CHKA1SX		;ACCU1 = 0
CHKA1S2	LDA F_ACCU1+5
CHKA1S1	ROL A
	LDA #$FF
	BCS CHKA1SX		;ACCU1 < 0
	LDA #1			;ACCU1 > 0
CHKA1SX	RTS


SGN	JSR CHK_A1S		;SGN COMMAND
BYT_FLT	STA F_ACCU1+1
	LDA #0
	STA F_ACCU1+2
	LDX #$88
BYTFLT1	LDA F_ACCU1+1
	EOR #$FF
	ROL A
INTFLT	LDA #0			;CONVERT INT TO FLOAT
	STA F_ACCU1+4
	STA F_ACCU1+3
INT_F1	STX F_ACCU1
	STA ARND
	STA F_ACCU1+5
	JMP PLUS12


ABS	LSR F_ACCU1+5		;ABS COMMAND
	RTS


COMP_A1	STA PNT			;COMPARE VAR WITH ACCU1
COMPA11	STY PNT+1
	LDY #0
	LDA (PNT),Y
	INY
	TAX
	BEQ CHK_A1S
	LDA (PNT),Y
	EOR F_ACCU1+5
	BMI CHKA1S2
	CPX F_ACCU1
	BNE COMPA12
	LDA (PNT),Y
	ORA #$80
	CMP F_ACCU1+1
	BNE COMPA12
	INY
	LDA (PNT),Y
	CMP F_ACCU1+2
	BNE COMPA12
	INY
	LDA (PNT),Y
	CMP F_ACCU1+3
	BNE COMPA12
	INY
	LDA #$7F
	CMP ARND
	LDA (PNT),Y
	SBC F_ACCU1+4
	BEQ FNINTX
COMPA12	LDA F_ACCU1+5
	BCC COMPA13
	EOR #$FF
COMPA13	JMP CHKA1S1


FN_INT	LDA F_ACCU1		;CONVERT FLOAT TO UNSIGNED INT
	BEQ INT1
	SEC
	SBC #$A0
	BIT F_ACCU1+5
	BPL FNINT1
	TAX
	LDA #$FF
	STA F_ACCU1+7
	JSR A1_C1
	TXA
FNINT1	LDX #F_ACCU1
	CMP #$F9
	BPL FNINT2
	JSR BMUL10
	STY F_ACCU1+7
FNINTX	RTS

FNINT2	TAY
	LDA F_ACCU1+5
	AND #$80
	LSR F_ACCU1+1
	ORA F_ACCU1+1
	STA F_ACCU1+1
	JSR BMUL15
	STY F_ACCU1+7
	RTS


INT	LDA F_ACCU1		;INT COMMAND
	CMP #$A0
	BCS INTX
	JSR FN_INT
	STY ARND
	LDA F_ACCU1+5
	STY F_ACCU1+5
	EOR #$80
	ROL A
	LDA #$A0
	STA F_ACCU1
	LDA F_ACCU1+4
	STA SRC_CHR
	JMP PLUS12

INT1	STA F_ACCU1+1
	STA F_ACCU1+2
	STA F_ACCU1+3
	STA F_ACCU1+4
	TAY
INTX	RTS


STR_VAL	LDY #0			;CONVERT STRING TO NUMBER
	LDX #10
STRVAL1	STY BUF2+1,X
	DEX
	BPL STRVAL1
	BCC STRVAL2
	CMP #'-
	BNE STRVAL3
	STX F_ACCU1+6
	BEQ STRVAL4
STRVAL3	CMP #'+
	BNE STRVAL5
STRVAL4	JSR GETCHR
STRVAL2	BCC STRVALA
STRVAL5	CMP #'.
	BEQ STRVAL6
	CMP #'E
	BNE STRVAL7
	JSR GETCHR
	BCC STRVAL8
	CMP #$AB		;- TOKEN
	BEQ STRVAL9
	CMP #'-
	BEQ STRVAL9
	CMP #$AA		;+ TOKEN
	BEQ STRVALB
	CMP #'+
	BEQ STRVALB
	BNE STRVALC

STRVAL9	ROR BUF2+4
STRVALB	JSR GETCHR
STRVAL8	BCC RD_AN1
STRVALC	BIT BUF2+4
	BPL STRVAL7
	LDA #0
	SEC
	SBC BUF2+2
	JMP STRVALD

STRVAL6	ROR BUF2+3
	BIT BUF2+3
	BVC STRVAL4
STRVAL7	LDA BUF2+2
STRVALD	SEC
	SBC BUF2+1
	STA BUF2+2
	BEQ STRVALE
	BPL STRVALF
STRVALG	JSR A1DIV10
	INC BUF2+2
	BNE STRVALG
	BEQ STRVALE

STRVALF	JSR A1MUL10
	DEC BUF2+2
	BNE STRVALF
STRVALE	LDA F_ACCU1+6
	BMI STRVALH
	RTS

STRVALH	JMP NEG

STRVALA	PHA
	BIT BUF2+3
	BPL STRVALI
	INC BUF2+1
STRVALI	JSR A1MUL10
	PLA
	SEC
	SBC #'0
	JSR RD_ASCNR
	JMP STRVAL4


RD_ASCNR PHA			;READ '0..9' FROM BASIC TEXT
	JSR A1_A2
	PLA
	JSR BYT_FLT
	LDA F_ACCU2+5
	EOR F_ACCU1+5
	STA ACOMP
	LDX F_ACCU1
	JMP PLUS0


RD_AN1	LDA BUF2+2
	CMP #10
	BCC RD_AN2
	LDA #100
	BIT BUF2+4
	BMI RD_AN3
	JMP OVF_ERR

RD_AN2	ASL A
	ASL A
	CLC
	ADC BUF2+2
	ASL A
	CLC
	LDY #0
	ADC (CHRGTP),Y
	SEC
	SBC #'0
RD_AN3	STA BUF2+2
	JMP STRVALB


PRT_LNR	LDA #IN_M		;PRINT BASIC LINE NR
	LDY #IN_M/256
	JSR PRT_STR
	LDA ALINNR+1
	LDX ALINNR


PRT_16	STA F_ACCU1+1		;PRINT X/A AS 16 BIT INTEGER
	STX F_ACCU1+2
	LDX #$90
	SEC
	JSR INTFLT
	JSR FLT_ASC		;PRINT F_ACCU1
	JMP PRT_STR


FLT_ASC	LDY #1			;CONVERT FLOAT TO ASCII ($100)
FLTASC1	LDA #SP
	BIT F_ACCU1+5
	BPL FLTASC2
	LDA #'-
FLTASC2	STA STACK-1,Y
	STA F_ACCU1+5
	STY P_FUNC
	INY
	LDA #'0
	LDX F_ACCU1
	BNE FLTASC3
	JMP FLTAS20

FLTASC3	LDA #0
	CPX #$80
	BEQ FLTASC4
	BCS FLTASC5
FLTASC4	LDA #F_STR2
	LDY #F_STR2/256
	JSR MUL0
	LDA #$F7
FLTASC5	STA BUF2+1
FLTAS11	LDA #F_STR1
	LDY #F_STR1/256
	JSR COMP_A1
	BEQ FLTASC6
	BPL FLTASC7
FLTAS10	LDA #F_STR
	LDY #F_STR/256
	JSR COMP_A1
	BEQ FLTASC8
	BPL FLTASC9
FLTASC8	JSR A1MUL10
	DEC BUF2+1
	BNE FLTAS10
FLTASC7	JSR A1DIV10
	INC BUF2+1
	BNE FLTAS11
FLTASC9 JSR A1_P05
FLTASC6 JSR FN_INT
	LDX #1
	LDA BUF2+1
	CLC
	ADC #10
	BMI FLTAS12
	CMP #11
	BCS FLTAS13
	ADC #$FF
	TAX
	LDA #2
FLTAS12	SEC
FLTAS13	SBC #2
	STA BUF2+2
	STX BUF2+1
	TXA
	BEQ FLTAS14
	BPL FLTAS15
FLTAS14	LDY P_FUNC
	LDA #'.
	INY
	STA STACK-1,Y
	TXA
	BEQ FLTAS16
	LDA #'0
	INY
	STA STACK-1,Y
FLTAS16	STY P_FUNC
FLTAS15	LDY #0
FLTASCA	LDX #$80
FLTAS19	CLC
	LDA F_ACCU1+4
	ADC CON_C1+3,Y
	STA F_ACCU1+4
	LDA F_ACCU1+3
	ADC CON_C1+2,Y
	STA F_ACCU1+3
	LDA F_ACCU1+2
	ADC CON_C1+1,Y
	STA F_ACCU1+2
	LDA F_ACCU1+1
	ADC CON_C1,Y
	STA F_ACCU1+1
	INX
	BCS FLTAS17
	BPL FLTAS19
	BMI FLTAS18

FLTAS17	BMI FLTAS19
FLTAS18	TXA
	BCC FLTAS26
	EOR #$FF
	ADC #10
FLTAS26	ADC #'0'-1
	INY
	INY
	INY
	INY
	STY VPNT
	LDY P_FUNC
	INY
	TAX
	AND #$7F
	STA STACK-1,Y
	DEC BUF2+1
	BNE FLTAS21
	LDA #'.
	INY
	STA STACK-1,Y
FLTAS21	STY P_FUNC
	LDY VPNT
	TXA
	EOR #$FF
	AND #$80
	TAX
	CPY #36
	BEQ FLTAS22
	CPY #60
	BNE FLTAS19
FLTAS22	LDY P_FUNC
FLTAS23	LDA STACK-1,Y
	DEY
	CMP #'0
	BEQ FLTAS23
	CMP #'.
	BEQ FLTAS24
	INY
FLTAS24	LDA #'+
	LDX BUF2+2
	BEQ FLTAS25
	BPL FLTAS27
	LDA #0
	SEC
	SBC BUF2+2
	TAX
	LDA #'-
FLTAS27	STA STACK+1,Y
	LDA #'E
	STA STACK,Y
	TXA
	LDX #$2F
	SEC
FLTAS28	INX
	SBC #10
	BCS FLTAS28
	ADC #'9'+1
	STA STACK+3,Y
	TXA
	STA STACK+2,Y
	LDA #0
	STA STACK+4,Y
	BEQ FLTAS29
FLTAS20	STA STACK-1,Y
FLTAS25	LDA #0
	STA STACK,Y
FLTAS29	LDY #1
	RTS


SQR	JSR A1_A2		;SQR COMMAND
	LDA #CON_TAB
	LDY #CON_TAB/256
	JSR FIL_A1
EXPO	BEQ EXP
	LDA F_ACCU2
	BNE EXPO1
	JMP PLUS21

EXPO1	LDX #DEFPNT
	LDY #DEFPNT/256
	JSR A1_FOR1
	LDA F_ACCU2+5
	BPL EXPO2
	JSR INT
	LDA #DEFPNT
	LDY #DEFPNT/256
	JSR COMP_A1
	BNE EXPO2
	TYA
	LDY SRC_CHR
EXPO2	JSR A2_A11
	TYA
	PHA
	JSR LOG
	LDA #DEFPNT
	LDY #DEFPNT/256
	JSR MUL0
	JSR EXP
	PLA
	LSR A
	BCC NEGX


NEG	LDA F_ACCU1		;INVERT SIGN
	BEQ NEGX
	LDA F_ACCU1+5
	EOR #$FF
	STA F_ACCU1+5
NEGX	RTS


EXP	LDA #F_EXP		;EXP COMMAND
	LDY #F_EXP/256
	JSR MUL0
	LDA ARND
	ADC #$50
	BCC EXP1
	JSR A1RND1
EXP1	STA J_FN+2
	JSR A1_A21
	LDA F_ACCU1
	CMP #$88
	BCC EXP2
EXP3	JSR ACORR3
EXP2	JSR INT
	LDA SRC_CHR
	CLC
	ADC #$81
	BEQ EXP3
	SEC
	SBC #1
	PHA
	LDX #5			;SWAP ACCU1 AND ACCU2
EXP4	LDA F_ACCU2,X
	LDY F_ACCU1,X
	STA F_ACCU1,X
	STY F_ACCU2,X
	DEX
	BPL EXP4
	LDA J_FN+2
	STA ARND
	JSR MINUS
	JSR NEG
	LDA #F_EXP1
	LDY #F_EXP1/256
	JSR F_SUB1
	LDA #0
	STA ACOMP
	PLA
	JSR ACORR0
	RTS


F_SUB	STA P_FUNC		;SUBROUTINE FOR FUNCTIONS
	STY P_FUNC+1
	JSR A1_BUF1
	LDA #BUF1
	JSR MUL0
	JSR F_SUB2
	LDA #BUF1
	LDY #BUF1/256
	JMP MUL0

F_SUB1	STA P_FUNC
	STY P_FUNC+1
F_SUB2	JSR A1_BUF2
	LDA (P_FUNC),Y
	STA F_ACCU1+6
	LDY P_FUNC
	INY
	TYA
	BNE FSUB1
	INC P_FUNC+1
FSUB1	STA P_FUNC
	LDY P_FUNC+1
FSUB3	JSR MUL0
	LDA P_FUNC
	LDY P_FUNC+1
	CLC
	ADC #5			;NEXT CONSTANT IN BLOCK
	BCC FSUB2
	INY
FSUB2	STA P_FUNC
	STY P_FUNC+1
	JSR V_PA1
	LDA #BUF2
	LDY #BUF2/256
	DEC F_ACCU1+6
	BNE FSUB3
	RTS


RND	JSR CHK_A1S		;RND COMMAND
	BMI RND1
	BNE RND2
	LDA RDTEN		;READ 6532 TIMER ENABLE IRQ
	STA F_ACCU1+1
	LDA TIM1C
	STA F_ACCU1+2
	LDA TIM2C
	STA F_ACCU1+3
	LDA TIM1C+1
	STA F_ACCU1+4
	JMP RND3

RND2	LDA #RNDNR
	LDY #RNDNR/256
	JSR FIL_A1
	LDA #C_RND
	LDY #C_RND/256
	JSR MUL0
	LDA #C_RND1
	LDY #C_RND1/256
	JSR V_PA1
RND1	LDX F_ACCU1+4
	LDA F_ACCU1+1
	STA F_ACCU1+4
	STX F_ACCU1+1
	LDX F_ACCU1+2
	LDA F_ACCU1+3
	STA F_ACCU1+2
	STX F_ACCU1+3
RND3	LDA #0
	STA F_ACCU1+5
	LDA F_ACCU1
	STA ARND
	LDA #$80
	STA F_ACCU1
	JSR PLUS13
	LDX #RNDNR
	LDY #RNDNR/256
	JMP A1_FOR1


COS	LDA #F_COS		;COS COMMAND
	LDY #F_COS/256
	JSR V_PA1


SIN	JSR A1_A2		;SIN COMMAND
	LDA #F_SIN
	LDY #F_SIN/256
	LDX F_ACCU2+5
	JSR A1D10A
	JSR A1_A2
	JSR INT
	LDA #0
	STA ACOMP
	JSR MINUS
	LDA #F_SIN1
	LDY #F_SIN1/256
	JSR MINUS0
	LDA F_ACCU1+5
	PHA
	BPL SIN1
	JSR A1_P05
	LDA F_ACCU1+5
	BMI SIN2
	LDA SGN_F
	EOR #$FF
	STA SGN_F
SIN1	JSR NEG
SIN2	LDA #F_SIN1
	LDY #F_SIN1/256
	JSR V_PA1
	PLA
	BPL SIN3
	JSR NEG
SIN3	LDA #F_SIN2
	LDY #F_SIN2/256
	JMP F_SUB


TAN	JSR A1_BUF1		;TAN COMMAND
	LDA #0
	STA SGN_F
	JSR SIN
	LDX #DEFPNT
	LDY #DEFPNT/256
	JSR A1_FOR1
	LDA #BUF1
	LDY #BUF1/256
	JSR FIL_A1
	LDA #0
	STA F_ACCU1+5
	LDA SGN_F
	JSR TAN1
	LDA #DEFPNT
	LDY #DEFPNT/256
	JMP DIV0

TAN1	PHA
	JMP SIN1


ATN	LDA F_ACCU1+5		;ATN COMMAND
	PHA
	BPL ATN1
	JSR NEG
ATN1	LDA F_ACCU1
	PHA
	CMP #$81
	BCC ATN2
	LDA #F_CONST
	LDY #F_CONST/256
	JSR DIV0
ATN2	LDA #F_ATN
	LDY #F_ATN/256
	JSR F_SUB
	PLA
	CMP #$81
	BCC ATN3
	LDA #F_COS
	LDY #F_COS/256
	JSR MINUS0
ATN3	PLA
	BPL KILLX
	JMP NEG


KILL	JSR SETFCB		;KILL COMMAND
	LDX #ERASE
	JSR BDOS
	BCS LOAD2
KILLX	RTS


SAVE	JSR F_OPEN		;SAVE COMMAND
	JSR S_DMAB		;set DMA to BASBEG
SAVE3	SEC
	LDA VTBEG		;CHECK FOR EOF
	SBC DMA
	LDA VTBEG+1
	SBC DMA+1
	BCC SAVE1
	LDX #WRITE
	JSR BDOS
	BCS LOAD2
	INC DMA+1
	BCC SAVE3

SAVE1	LDX #DCLOSE
	JSR BDOS
	BCS LOAD2
	RTS


LOAD	JSR SETFCB		;LOAD COMMAND
	JSR S_DMAB		;set DMA to BASBEG
	LDX #DOPEN
	JSR BDOS
	BCS LOAD2
LOAD1	LDX #RDSEQ
	JSR BDOS
	BCS LOAD3
	INC DMA+1
	LDA DMA+1
	CLC
	SBC BDOS+2
	BCC LOAD1
LOAD2	LDX #ERR18-ERR_TAB	;DISK ERROR
	JMP ERROR

LOAD3	CMP #EOF
	BNE LOAD2
	LDA DMA
	STA VTBEG
	LDA DMA+1
	STA VTBEG+1
	JSR BAS_RST
	JSR L_INS		;BASIC RESET AND REBIND LINES
	JMP WARM


OPEN	JSR TRMCALC		;Open channel as file
	BEQ OPENX
	JSR CHK_KM
	PHP
	CPX #8			;only channel 8 implemented
	BNE OPENX
	STX IO_CHAN
	PLP
	JSR F_OPEN
	LDA #$80
	STA FLAG_8
	ASL A			;A=0!
	STA BUFPNT
	STA STATUS
	RTS

OPENX	JMP SYN_ERR


CLOSE	JSR TRMCALC		;close open file
	CPX #8
	BNE OPENX
	BIT FLAG_8		;check for open file
	BPL LOAD2		;buffer dirty?
	BVC CLOSE2
	LDX #WRITE
	JSR BDOS
	BCS LOAD2
CLOSE2	LDA #0
	STA IO_CHAN		;IO_CHAN=0!
	STA FLAG_8
CLOSE1	JMP SAVE1


F_OPEN	JSR SETFCB		;open file
	LDX #DOPEN
	JSR BDOS
	BCC FOPEN2
	CMP #NOTFND
	BNE LOAD2
	LDX #CREATE		;if file does not exist, create it
	JSR BDOS
FOPEN1	BCS LOAD2
FOPEN2	LDA DMABUF		;restore DMA vector
	STA DMA
	LDA DMABUF+1
	STA DMA+1
	RTS


SETFCB	BEQ OPENX		;SET FCB TO "FILENAME.EXT"
	JSR IN_TERM
	BIT VAR_F		;IF NO STRING
	BMI SETFCB0
	JMP TM_ERR		;TYPE MISMATCH ERROR

SETFCB0	JSR GARCOL1		;remove string
	STA J_FN+1		;SAVE STRING LENGTH
	LDA #SP
	LDY #11			;RESET FCB
SETFCB1	STA (FCB1),Y
	DEY
	BNE SETFCB1
	TYA
	STA (FCB1),Y
	STA P_FUNC+1		;STRING INDEX=0
	INY
	STY P_FUNC		;FCB1 INDEX=1
	CPY J_FN+1
	BCS SETFCB2
	LDA (T_PNT),Y		;CHECK 2. CHR FOR ':
	CMP #':
	BNE SETFCB3
	DEY
	LDA (T_PNT),Y		;SET DRIVE BYTE
	AND #$5F
	CMP #'A
	BCC SETFCBX
	CMP #'I
	BCS SETFCBX
	AND #$0F
	STA (FCB1),Y
	INC P_FUNC+1
SETFCB2	INC P_FUNC+1
SETFCB3	LDY P_FUNC+1
	CPY J_FN+1
	BCS SETFCB4
	LDA (T_PNT),Y
	JSR SF_CHK
	CMP #'.
	BEQ SETFCB5
	LDY P_FUNC
	STA (FCB1),Y
	INC P_FUNC
SETFCB7	CPY #12
	BCC SETFCB2
	BCS SETFCBX

SETFCB5	LDY #9
	STY P_FUNC
	BNE SETFCB7

SETFCB4	LDY #9
	LDA (FCB1),Y
	CMP #SP
	BNE SETFCB8
	LDA #'B			;IF NO EXT THEN .BAS
	STA (FCB1),Y
	INY
	LDA #'A
	STA (FCB1),Y
	INY
	LDA #'S
	STA (FCB1),Y
SETFCB8	RTS
	
SETFCBX JMP LOAD2
S_DMAB	LDA BASBEG		;SET DMA = BASBEG
	STA DMA
	LDA BASBEG+1
	STA DMA+1
	RTS

SF_CHKX	JMP SYN_ERR

SF_CHK	LDY KEYTX-KEYTAB-1	;CHECK CHR FOR FILENAME.EXT
SF_CHK2	CMP KEYTAB,Y
	BEQ SF_CHK1
	DEY
	BPL SF_CHK2
	CMP #'-			;-./0123456789
	BCC SF_CHKX
	CMP #':
	BCC SF_CHK1
	AND #$5F
	CMP #'A
	BCC SF_CHKX
	CMP #'[
	BCS SF_CHKX
SF_CHK1	RTS


BYE	LDX #0			;SYSTEM COMMAND
	JMP BDOS


DUMMY4	JMP SYN_ERR


GETCHR	INC CHRGTP		;CHR GET ROUTINE
	BNE GETCHR1
	INC CHRGTP+1
GETCHR1	JSR CHRGTP-1
	CMP #':
	BCS GETCHRX
GETCHR2	CMP #SP
	BEQ GETCHR
	SEC
	SBC #'0
	SEC
	SBC #$D0		;DIGIT   C=0  ELSE  C=1
GETCHRX	RTS


CHROUT	CMP #SP
	BCS CHROUT2
	CMP #HT
	BEQ CHROUT2
	CMP #LF
	BEQ CHROUT1
	CMP #CLS
	BEQ CHROUT3
	CMP #CR
	BEQ CHROUT3
	CMP #BS
	BEQ CHROUT4
	RTS

CHROUT3	PHA
	LDA #0
	STA CUR_COL
	PLA
	BNE CHROUT1


CHROUT2	INC CUR_COL	;INC CURSOR COLUMN
	DB BIT_ABS
CHROUT4	DEC CUR_COL
CHROUT1	STX TEMPX	;OUTPUT CHR TO SCREEN
	LDX OUT_DEV
	CPX IO_CHAN
	BNE CHROUT5
	CPX #8		;Disk file?
	BEQ WRD_CHR
	CPX #4		;Printer?
	BNE CHROUT5
	LDX #LISTDEV
	DB BIT_ABS
CHROUT5	LDX #CONIO
	JSR BDOS
	AND #$7F	;7 Bit ASCII only
CHROUT6	LDX TEMPX
	RTS


CHRIN	LDA #$FF	;INPUT CHR FROM KEYBOARD
	STX TEMPX
	LDX IN_DEV
	BEQ CHROUT5
	CPX #8		;file input
	BEQ RDD_CHR
	JMP SYN_ERR

BRKTST	STX TEMPX
	LDX #CONST
	JSR BDOS
	CMP #BRK_KEY
	BEQ BRKTST1
	LDX TEMPX
	RTS

BRKTST1	JMP STOP	;BREAK ENTRY


SET_IN	CPX #0		;Set input channel
	BEQ SETIN1
	CPX #8
	BNE SETOUT3
	BIT FLAG_8
	BPL SETOUT3
SETIN1	STX IN_DEV
	RTS


SET_OUT	CPX #3		;Set output channel
	BEQ SETOUT1
	CPX #4
	BEQ SETOUT1
	CPX #8
	BNE SETOUT3
	BIT FLAG_8	;Check file open flag
	BPL SETOUT3
SETOUT1 STX OUT_DEV
	RTS

SETOUT3	JMP ILLQ_ERR


RES_IO	LDA #3		;reset in- and output devives
	STA OUT_DEV	;output via screen
	LDA #0
	STA IN_DEV	;input via keyboard
	STA IO_CHAN	;IO channel 0
	RTS


WRD_CHR	STY TEMPY	;write chr to disk
	LDY BUFPNT
	STA (DMA),Y
	LDA FLAG_8	;set buffer dirty bit
	ORA #$40
	STA FLAG_8
	INC BUFPNT
	BNE WRDCHR1
	LDX #WRITE
	JSR BDOS
	BCS WRDCHR2
	LDA FLAG_8	;reset buffer dirty bit
	AND #%10111111
	STA FLAG_8
WRDCHR1	LDY TEMPY
	JMP CHROUT6

WRDCHR2	JMP LOAD2	;disk error


RDD_CHR	STY TEMPY
	LDY BUFPNT
	BNE RDDCHR1
	LDX #RDSEQ
	JSR BDOS
	BCS RDDCHR2
	LDY #0
RDDCHR1	LDA (DMA),Y
	INC BUFPNT
	JMP WRDCHR1

RDDCHR2	CMP #EOF
	BNE WRDCHR2
	LDA #$40
	ORA STATUS
	STA STATUS
	LDA #CR
	BNE WRDCHR1


HEAP			;START OF BASIC'S RAM

	END
