;FLOPPY DISK FORMATIERER FUER DIE UDC-KARTE
;CP/M-65 VERSION

;D. LAUSBERG	(C) 1987
;V1.5	18.6.90
;V1.6	28.12.91	ASM-65 version, system copy
;V1.7	15.06.92	increased speed
;V2.0	20.06.92	uses BIOS FORM_TRK
;V2.1	31.03.95	no format from C:
;V2.2	03.10.00	modified for sector BIOS
;V2.3	24.03.21	error corrections
;V2.4	27.04.21	4 Floppies, fast verify

VERSION	= $24		;VERSION NUMBER


;FORMAT	DS/DD	320 KBYTES/DISK
;16 SEKTOREN/TRACK	256 BYTES/SEKTOR
;80 TRACKS/DISK
;DEPENDING ON BIOS
;=====================================

;SYSTEM CONSTANTS

DMA	= $FE
BDOS	= $F0
FCB1	= $F6
DPH	= $F8
CCPV	= $DE
TPA	= $0200

DRIVE	= 0
TRK	= 1
SEC	= 2
ERRNO	= 3		;ERROR NR
RWFLAG	= 4		;READ/WRITE FLAG
MAXTRK	= 5		;MAX TRACKS
MAXSEC	= 6		;MAX SECTORS
SYSSECS = 7		;NR OF SYSTEM sectors
TRACK	= 8		;track buffer for form_trk
SIDEMS	= 9		;side bit
SECTOR	= 10		;sector nr
ERRCOD	= 13		;error nr buffer
RETRY	= 14		;retry counter

;BDOS COMMANDS

CONIN	= $01
CONOUT	= $02
STROUT	= $09
DSKSEL	= $0E
GETDRV	= $19
FBIOS	= $1A

;BIOS COMMANDS

CHRIN	= 3
HOME	= 8
SELDSK	= 9
SETSEC	= 11
READ	= 12
WRITE	= 13
GET_VER	= 15

;WD 2797 COMMANDS

RDSECC	= $88		;READ SECTOR
RSTORC	= $00		;restore, steprate 6 ms
SEEKC	= $18		;SEEK WITHOUT VERIFY, steprate 6 ms
WRTRKC	= $F0		;WRITE TRACK


;UDC-CONTROLLER ADDRESSES

UDC	= $F500
FDSEL	= UDC+$40	;MOTOR/SELECT DRIVE LATCH
FDSCR	= UDC+$50	;READ STATUS, WRITE COMMAND
FDTRG	= UDC+$51	;R/W TRACK REGISTER
FDSRG	= UDC+$52	;R/W SECTOR REGISTER
FDDAR	= UDC+$53	;R/W DATA REGISTER
FLSTAT	= UDC+$60	;IRQ --> BIT 7, DRQ --> BIT 6

;6532 ADDRESSES

SCRATCH	= $F600

STPRATE	= SCRATCH+$54		;Steprate $00: 6ms, $01: 12 ms
TIMER0	= SCRATCH+$71		;SYSTEM TIMER
TIMER1	= SCRATCH+$72		;8 BIT USER TIMER
TIMER2	= SCRATCH+$73		;16 BIT USER TIMER


;CONSTANTS

SELMSK	= $10		;MOTOR ON, DDEN ON

SPT	= 16		;SECTORS PER TRACK
MAXSECS	= 32		;Max. nr of system sectors
MAXTRY	= 10		;MAX TRIES ON ERROR


;CONTROL CODES

CR	= $0D
LF	= $0A
CLS	= $0C
SP	= $20
BREAK	= $03
EOT	= $00

;ERROR CODES

WRPROT	= $FC		;DISK WRITE PROTECTED
VER_ERR	= $83
NO_FORC	= $84
FORC_ERR = $85

;==========================================

	ORG TPA

	JSR INIT
	BCC FORMAT
	JSR ERROR
	RTS

FORMAT	JSR FDISK
	BCC FWEIT
	JSR ERROR
	BCC FORMAT

FWEIT	LDA #REPM		;REPEAT?
	LDY #REPM/256
	JSR PRTSTR
	JSR YESNO
	BCC FORMAT
EXIT	LDA #ENDM
	LDY #ENDM/256
	JSR PRTSTR
FDISKX	RTS


FDISK	JSR XCH_DSK		;INSERT A NEW DISC
	BCC FDISK1
	JSR ERROR
	JMP EXIT

FDISK1	LDA DRIVE
	LDY #SELDSK		;SELECT DRIVE
	JSR BIOS
	BCS FDISKX
	LDY #HOME
	JSR BIOS
	BCS FDISKX
	LDA #0			;START WITH TRACK 0
	STA TRK
	LDA #FORMM
	LDY #FORMM/256
	JSR PRTSTR

FORMLP	LDA TRK			;SET TRACK
	CMP MAXTRK		;LAST TRACK REACHED
	BCS ENDDSK
	JSR SETTRK
FORML1	LDA #TRACKM
	LDY #TRACKM/256
	JSR PRTSTR
	LDA TRK
	LSR A
	JSR PRTDEC		;PRINT TRACK NR.
	LDA #SIDEM
	LDY #SIDEM/256
	JSR PRTSTR
	LDA TRK
	AND #$01
	ORA #$30
	JSR PRTCHR
	JSR FORM_TRK
	BCS ENDDSKX
	INC TRK
	JMP FORMLP

ENDDSK	JSR PUT_SYS		;WRITE SYSTEM TO DISK
	BCS ENDDSKX
	LDA #OKM
	LDY #OKM/256
	JSR PRTSTR
	CLC
ENDDSKX	RTS


;======== SUBROUTINES =============

INIT	LDA #STARTM
	LDY #STARTM/256
	JSR PRTSTR
	LDY #GET_VER
	JSR BIOS
	CMP #$20
	BCC INITX
	LDX #GETDRV
	JSR BDOS
	CMP #4			;no format from E: or higher
	BCS INIT1
	LDY #6			;SET DISK PARAMETERS
	LDA (DPH),Y
	STA MAXSEC
	LDY #13
	LDA (DPH),Y
	STA SYSSECS
	LDA #80
	STA MAXTRK
	JSR GET_SYS
	RTS

INITX	LDA #VER_ERR
	SEC
	RTS

INIT1	LDA #NO_FORC
	SEC
	RTS


FORM_TRK			;FORMAT TRACK
FORM_LP	JSR SEEKTR		;SEEK TRACK
	BCC FORM_1
	RTS

FORM_1	LDA TRACK
	STA FTRACK		;SET TRACK NR
	LDA SIDEMS
	LSR A
	STA FSIDE		;SET SIDE BYTE
	LDA #WRTRKC
	ORA SIDEMS
	SEI			;NO IRQ'S FROM HERE
	STA FDSCR		;WRITE TRACK
	JSR DELAY
	LDY #SPT-1		;POINTER FOR ILVTAB

GAP0	LDX #80			;GAP 0
	LDA #$4E		;80 * $4E
GAP01	BIT FLSTAT
	BVC GAP01		;WAIT FOR DRQ
	STA FDDAR		;WRITE DATA
	DEX
	BNE GAP01

IDXMRK	BIT FLSTAT		;INDEX MARK
	BVC IDXMRK
	LDA IDXDAT,X
	STA FDDAR		;WRITE INDEX DATA
	CMP #$FC		;LAST BYTE?
	BEQ GAP1
	INX
	BNE IDXMRK

GAP1	LDX #50			;GAP 1
	LDA #$4E		;50 * $4E
GAP11	BIT FLSTAT
	BVC GAP11
	STA FDDAR
	DEX
	BNE GAP11

SECHD	LDA ILVTAB,Y		;GET SECTOR NR.
	STA FSECTOR
	LDX #0			;SET POINTER
SECHD1	BIT FLSTAT
	BVC SECHD1
	LDA INIDAT,X
	STA FDDAR		;WRITE HEADER DATA
	CMP #$FB
	BEQ SECDAT		;LAST BYTE?
	INX
	BNE SECHD1

SECDAT	LDX #0			;SECTOR DATA
	LDA #$E5		;256 * $E5
SECDA1	BIT FLSTAT
	BVC SECDA1
	STA FDDAR		;WRITE DATA
	DEX
	BNE SECDA1

SECTR	BIT FLSTAT		;WRITE SECTOR TRAILER
	BVC SECTR
	LDA #$F7		;WRITE CRC BYTES
	STA FDDAR

GAP3	LDX #54			;WRITE GAP 3
	LDA #$4E		;54 * $4E
GAP31	BIT FLSTAT
	BVC GAP31
	STA FDDAR
	DEX
	BNE GAP31
	DEY			;DEC SECTOR COUNTER
	BPL SECHD

GAP4	LDA #$4E		;WRITE $4E TILL END
GAP41	BIT FLSTAT
	BMI ENDTRK
	BVC GAP41
	STA FDDAR
	BVS GAP41

ENDTRK	LDA FDSCR		;GET STATUS
	STA ERRCOD
	CLI			;END OF CRITICAL PHASE
	AND #%11000111
	BNE ENDTRK1
	LDX #0			;VERIFY TRACK
VERI1	TXA
	STA SECTOR		;SET SECTOR NR WITH INTERLEAVE 1!
	JSR DREAD		;DUMY READ
	BCS VERIX
	INX
	CPX #SPT
	BCC VERI1
	LDA #0
	STA RETRY
	CLC
VERIX	RTS

ENDTRK1	JSR FERR
	BCS ENDTRK2
	JMP FORM_LP

ENDTRK2	LDY #ERRM1-SETAB-1
	JMP FDERR


GET_SYS	LDA #0			;RESET RWFLAG AND DRIVE
	STA DRIVE
	STA RWFLAG
	BEQ SYS

PUT_SYS	LDA #$80		;SET RWFLAG
	STA RWFLAG

SYS	JSR RES_DMA
	LDA #0
	STA SECTOR
	STA SECTOR+1
	STA SECTOR+2
SYS1	JSR RW_SYS
	BCS SYS_X
	INC SECTOR		;System never larger than $FF sectors = 64 kB
	LDA SECTOR
	CMP SYSSECS
	BCC SYS1
	CLC
SYS_X	RTS



GETKEY	LDY #CHRIN		;TASTE EINLESEN
	JSR BIOS
	RTS


YESNO	JSR GETKEY		;J/N?
	JSR UPCASE
	CMP #'J
	BEQ YESNO1
	CMP #'Y
	BEQ YESNO1
	SEC
	RTS

YESNO1	CLC
	RTS


RW_SYS	LDY #SETSEC		;READ/WRITE SECTOR TO DMA
	LDA #SECTOR
	JSR BIOS
	BIT RWFLAG
	BMI RW_TRK2
	LDY #READ
	JSR BIOS
	BCS RW_TRKX
RW_TRK3	INC DMA+1
RW_TRKX	RTS

RW_TRK2	LDY #WRITE
	JSR BIOS
	BCC RW_TRK3
	RTS


RES_DMA	LDA #HEAP
	STA DMA
	LDA #HEAP/256
	STA DMA+1
	RTS


XCH_DSK	CLC
	LDY #0
	LDA (FCB1),Y
	BNE XCH_DSK1
	LDX #GETDRV
	JSR BDOS
	SEC

XCH_DSK1
	ADC #$40		;SET DRIVE NAME
	STA DRVCHR
	CMP #'E			;DRIVE E: CAN'T BE FORMATTED
	BCS XCHDSKX
	AND #$0F		;SET DRIVE
	TAY
	DEY
	STY DRIVE
	LDA #XCHGM
	LDY #XCHGM/256		;INSERT DISK
	JSR PRTSTR
	LDX #CONIN		;WAIT FOR KEY
	JSR BDOS
	JSR CRLF
	CLC
	RTS

XCHDSKX	LDA #FORC_ERR
	SEC
	RTS


SETTRK	LSR A			;SET TRACK LOGICAL
	STA TRACK
	LDA #0
	ROL A
	ROL A
	STA SIDEMS
	RTS


DREAD	JSR DRVSEL
	JSR SEEKTR		;SELECT DRIVE AND SET TRACK
	BCS READX
	LDA SECTOR		;SET SECTOR
	STA FDSRG
	LDA #RDSECC
	ORA SIDEMS		;SET SIDE BIT
	SEI
	STA FDSCR		;READ SECTOR
	JSR DELAY
	LDY #0
READ1	BIT FLSTAT		;GET STATUS
	BMI READ2		;DONE
	BVC READ1		;NO DATA
	LDA FDDAR		;GET BYTE
;	STA (DMAV),Y		;Dummy read!
	INY
	JMP READ1

READ2	JSR DELAY
	CLI
	LDA FDSCR
	STA ERRCOD
	AND #%11011111		;MASK ERROR
	BNE READ3
	LDA #0			;RESET RETRY COUNTER
	STA RETRY
	CLC
READX	RTS

READ3	JSR FERR
	BCC DREAD		;REREAD
	LDY #ERRM1-SETAB-1
	JMP FDERR


DRVSEL	LDA DRIVE		;SELECT DRIVE
	AND #$03		;MAX. 4 DRIVES
	TAY
	LDA DRVTAB,Y		;GET DRIVE BIT
	ORA #SELMSK
	STA FDSEL		;MOTOR ON
;	LDA TIMER0
;	BNE DRVSE3
;	LDA #55/2		;0,5 SEC DELAY
;	STA TIMER0
;DRVSE2	LDA TIMER0
;	CMP #50/2
;	BCS DRVSE2
DRVSE3	LDA #50/2		;5 SECONDS MOTOR ON
	STA TIMER0
	RTS


SEEKTR	JSR READY		;SEEK TRACK
	BCS SEEKX
	LDY DRIVE
	LDA TRACK
	STA FDDAR
	LDA #SEEKC
	ORA STPRATE,Y		;set Steprate
	STA FDSCR		;AND SEEK
SEEK1	JSR READY
	BCS SEEKX
	STA ERRCOD
	AND #%10011001		;MASK SEEK ERROR
	BNE SKERR1
	CLC
SEEKX	RTS

SKERR1	JSR FERR		;CHECK ERROR COUNT
	BCC SEEKTR

SERR	LDY #3			;SET ERROR CONDITION

FDERR	LDA ERRCOD
	AND SETAB,Y
	BNE FDERR1
	DEY
	DEY
	BPL FDERR
	SEC			;C= 1 AND A= 0
	RTS			;UNKNOWN ERROR

FDERR1	DEY
	LDA SETAB,Y		;LOAD ERROR NR
	SEC
	RTS


DELAY	JSR DELAY1		;DELAY 28 uS
DELAY1	NOP
	RTS


READY	JSR DELAY		;WAITS WHILE CONTROLLER
READY1	LDA TIMER0		;IS BUSY AND DRIVE NOT READY
	BEQ READY2
	LDA #%10000001		;MASK READY/BUSY BITS
	BIT FDSCR
	BNE READY1
	LDA FDSCR
	CLC
	RTS

READY2	LDA #$FD		;DRIVE NOT READY
	SEC
	RTS


FERR	INC RETRY		;INC RETRY COUNTERS
	LDA RETRY		;NO MORE TRIES?
	CMP #MAXTRY
	BCS FERR1		;RETRY
	LSR A
	BCC FERR1
RESTORE	LDA #RSTORC
	LDY DRIVE
	ORA STPRATE,Y		;set Steprate
	STA FDSCR		;RESTORE
	JSR READY
FERR1	RTS


BIOS	LDX #FBIOS
	JMP BDOS


ERROR	STA ERRNO	;ERROR ROUTINE
	JSR CRLF
	LDA #ERRTAB	;SET CCPV
	STA CCPV
	LDA #ERRTAB/256
	STA CCPV+1
	LDY #0		;CHECK ERROR CODE
	LDA (CCPV),Y
ERROR1	BEQ ERROR4	;END OF ERROR ROUTINE
	CMP ERRNO
	BEQ ERROR3
ERROR2	JSR INCCPV	;SKIP ERROR MESSAGE
	BNE ERROR2
	JSR INCCPV
	JMP ERROR1

ERROR3	JSR INCCPV
	PHA
	JSR ERRTYP	;PRINT ERROR TYPE
	JSR INCCPV
	LDA CCPV	;PRINT ERROR MESSAGE
	LDY CCPV+1
	JSR PRTSTR
	PLA
	BPL ERROR5
	JSR ASKRTY	;ASK FOR RETRY
	LDA ERRNO
	RTS

ERROR4	JSR UETYP	;UNKNOWN ERROR
ERROR5	SEC
	RTS


ERRTYP	LDY #0		;PRINT ERROR TYPE
ERRTY1	LSR A		;SHIFT SOURCE BIT IN C
	BCS ERRTY2
	INY		;X=X+5
	INY
	INY
	INY
	INY
	BNE ERRTY1

ERRTY2	LDA ETYPTB,Y
	BEQ UETYP	;LAST CHR?
	JSR PRTCHR
	INY
	BNE ERRTY2

UETYP	LDA #ERRM1
	LDY #ERRM1/256
	JSR PRTSTR
	LDA ERRNO
	JSR PRTHEX

CRLF	LDA #CRLFM	;PRINTS A NEWLINE
	LDY #CRLFM/256

PRTSTR	LDX #STROUT
	JMP BDOS


PRT2SP	JSR PRTSP


PRTSP	LDA #SP


PRTCHR	LDX #CONOUT	;PRINTS A CHR
	JMP BDOS


INCCPV	INC CCPV	;INC CCPV
	BNE INCCP1
	INC CCPV+1
INCCP1	LDA (CCPV),Y
	RTS


UPCASE	CMP #'a
	BCC UPCASX
	CMP #$7F
	BCS UPCASX
	AND #$5F
UPCASX	RTS


ASKRTY	LDA #RTYMES	;RETRY?
	LDY #RTYMES/256
	JSR PRTSTR
	LDX #CONIN
	JSR BDOS
	JSR UPCASE
	CMP #'Y
	BNE ASKRT1
	CLC
	RTS

ASKRT1	SEC
	RTS


PRTDEC	JSR COMNUM	;PRINT DECIMAL
	PHA
	TYA
	JSR COMNUM
	PHA
	TYA
	JSR PRTNUM
	PLA
	JSR PRTNUM
	PLA		;PLA AND PRTNUM
PRTNUM	ORA #$30
	JMP PRTCHR


COMNUM	LDY #0		;DIV/10
COMNU1	SEC
	SBC #10
	BCC COMNU2
	INY
	BNE COMNU1

COMNU2	ADC #10
	RTS


PRTHEX	PHA		;PRINTS A HEX NUMBER
	LSR A
	LSR A
	LSR A
	LSR A
	JSR PRTNIB	;PRINT NIBBLE
	PLA
	AND #$0F

PRTNIB	CMP #$0A
	BCC PRTNI1
	ADC #6
PRTNI1	ADC #$30
	JSR PRTCHR
	RTS

;--- DRIVE TABLE ---

DRVTAB	DB $01,$02,$04,$08		;DRIVE TABLE

;========== FORMAT DATA AREA =============

IDXDAT	DB 0,0,0,0,0,0,0,0,0,0,0,0
	DB $F6,$F6,$F6,$FC

INIDAT	DB 0,0,0,0,0,0,0,0,0,0,0,0
	DB $F5,$F5,$F5,$FE
FTRACK	DB $00
FSIDE	DB $00
FSECTOR	DB $00
LENGTH	DB $01		;256 BYTES
	DB $F7,'NNNNNNNNNNNNNNNNNNNNNN'
	DB 0,0,0,0,0,0,0,0,0,0,0,0
	DB $F5,$F5,$F5,$FB

ILVTAB	DB 15,7,14,6,13,5,12,4,11,3,10,2,9,1,8,0


;======	MESSAGES	======

SETAB	DB $FE,$08,$FF,$10		;SEEK ERROR
	DB $FA,$04,$FC,$40,$FD,$80	;WRITE TRACK ERROR

ERRM1	DB ' Error $',EOT
RTYMES	DB CR,LF,'Retry	(Y/N) ? ',EOT

ETYPTB	DB 'BIOS',$00,'BDOS',$00,'CCP',$00,$00
	DB 'RSX',$00,$00,'USER',$00

ERRTAB	DB $FF,$81,'Seek Error, record not found',EOT
	DB $FE,$81,'CRC Error',EOT
	DB $FD,$81,'Drive not ready',EOT
	DB $FC,$81,'Disk write protected',EOT
	DB $FB,$81,'Sector not found',EOT
	DB $FA,$81,'Lost data on writing track',EOT
	DB $F9,$01,'Invalid Drive',EOT
	DB $DE,$82,'Directory full',EOT
	DB $DD,$82,'File not found',EOT
	DB $DC,$02,'File exists',EOT
	DB $D9,$02,'Invalid FCB',EOT
	DB $D8,$82,'Disk full',EOT
	DB $D6,$82,'File is R/O',EOT
	DB $85,$10,'Harddisc can',$27,'t be formatted',EOT
	DB $84,$10,'FORMAT.COM can',$27,'t be executed from Harddisc',EOT
	DB $83,$10,'BIOS Version lower than 2.2',EOT
	DB $82,$10,'Illegal Parameter',EOT
	DB $81,$10,'Missing Parameter',EOT

	DB $00

STARTM	DB CLS
	DB 'UDC-FORMATTER V',VERSION/16+$30,'.',VERSION*$1000/$1000+$30
	DB '			(c) D. Lausberg	1987-2021'
	DB CR,LF,CR,LF
	DB 'Format :	DS/DD	320 KBytes'
	DB CR,LF,EOT
XCHGM	DB CR,LF,'Neue Diskette in Drive '
DRVCHR	DB 'B: einlegen'
	DB CR,LF,'und Taste druecken'
	DB CR,LF,CR,LF
	DB 'Abbruch mit <CTRL-C>',CR,LF,CR,LF,EOT
ENDM	DB CR,LF,'Formatieren beendet',EOT
FORMM	DB 'FORMATTING ...',CR,LF,CR,LF,EOT
TRACKM	DB CR,'TRACK ',EOT
SIDEM	DB '  SIDE ',EOT
OKM	DB CR,LF,CR,LF,'Diskette erfolgreich formatiert',CR,LF,EOT
REPM	DB CR,LF,'Eine weitere Diskette formatieren?  <Y/N> ',EOT

CRLFM	DB CR,LF,EOT

TRK_BUF
HEAP	= MAXSECS*256+TRK_BUF

ENDE	END
