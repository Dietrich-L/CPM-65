;DEBUG.COM -- CP/M-65 DEBUGGER
;BY D. LAUSBERG	 (C)1989
;V1.2	14.06.90
;V1.3	06.02.91	ASM-65 Version, Disassembler
;V1.4	19.12.91	new commands, improved disassembler
;V1.5	10.03.95	new memory map
;V1.6	09.04.22	SEARCH, NFILE, error corrections
;V1.7	18.02.23	error correction dump would not stop
;V1.8	08.08.23	QUIT restores original IRQ vetor
VERSION	= $18

;SYSTEM CONSTANTS

DMA	= $FE
FCB1	= $F6
BDOS	= $F0
INBUF	= $EC
CCPV	= $E0
PNT	= $D8
SA	= 0
ZA	= 2
TPA	= $0200
MEMTOP	= $C000
IRQ	= $F67C

;BIOS COMMANDS

CBOOT	= 0

;BDOS COMMANDS

BOOT	= $00
CONIN	= $01
CONOUT	= $02
STROUT	= $09
GETLIN	= $0A
DSKSEL	= $0E
OPEN	= $0F
CLOSE	= $10
RDSEQ	= $14
WRITE	= $15
CREATE	= $16
DEFDRV	= $19
BIOS	= $1A

;CONTROL CODES
BS	= $08
CLS	= $0C
CR	= $0D
EOT	= $00
LF	= $0A
SP	= $20

;PARAMETERS
MAXBNR	= 8

;ERROR CODES
DOUBLE	= $DC
EOF	= $D7
BRKERR	= $91		;BREAK ERROR
NOCOM	= $80
MISPAR	= $81
ILLPAR	= $82
TOOMCH	= $83
EOL	= $84
M_OVERLAP = $85		;MOVE OVERLAP
NOT_FND	= $86


	ORG TPA

;LOADER FOR DEBUG

INSTALL	LDX #BTAB-MEMTOP/256+1	;LENGTH IN PAGES
	LDA #SOURCE
	STA SA
	LDA #SOURCE/256
	STA SA+1
	LDA BDOS+1
	STA SOURCE+1
	LDA BDOS+2
	STA SOURCE+2
	LDA #MEMTOP
	STA ZA
	STA BDOS+1
	LDA #MEMTOP/256
	STA ZA+1
	STA BDOS+2
	LDY #0
INST1	LDA (SA),Y
	STA (ZA),Y
	INY
	BNE INST1
	INC SA+1
	INC ZA+1
	DEX
	BPL INST1
	JMP MEMTOP+3

SOURCE				;HERE STARTS DEBUG


	ORG MEMTOP

	JMP BDOS
DEBUG	JSR INIT	;INIT VARIABLES
	BCS DEBUG2
DEBUGL	LDA #PROMPT
	LDY #PROMPT/256
	JSR PRTSTR
	LDX #GETLIN
	JSR BDOS
	LDY #0		;SET COMMAND POINTER
	STY CMDVEC
DEBUG1	JSR DECODE	;DECODE AND EXEC COMMAND
	BCC DEBUG1
	CMP #EOL	;END OF COMMAND
	BEQ DEBUGL
DEBUG2	JSR ERROR
	JMP DEBUGL


DECODE	JSR GNCHR	;GET NEXT CHR
	BCS DECODX
	CMP #'; 	;SEPARATOR?
	BNE DECOD1
	JSR GNCHR
	BCS DECODX
DECOD1	LDY #0		;SEARCH COMMAND
	STA CMDKEY
DECOD4	LDA CMDTAB,Y
	BEQ DECOD2	;COMMAND NOT FOUND
	CMP CMDKEY
	BEQ DECOD3	;FOUND
	INY
	INY
	INY
	BNE DECOD4

DECOD3	INY
	LDA CMDTAB,Y
	PHA
	INY
	LDA CMDTAB,Y
	PHA
	RTS		;EXEC

DECOD2	LDA #NOCOM	;UNKNOWN COMMAND
	SEC
DECODX	RTS

;========== COMMANDS ============= 

DUMP	JSR G1ADR	;DUMP
	BCS DUMPX
	LDA PNT
	AND #$F0
	STA PNT
	JSR GETHEX	;GET 2. PARAMETER
	STA ENDAD
	STY ENDAD+1
	BCC DUMP1
	CMP #MISPAR
	BNE DUMP2
	CLC
	LDA PNT
	ADC #$D0	;13 LINES DEFAULT
	STA ENDAD
	LDA PNT+1
	ADC #0
	STA ENDAD+1
DUMP1	JSR DUMPHE	;PRINT HEADER
DUMP3	JSR DUMPL	;PRINT LINE
	BCS DUMP4
	LDA PNT		;print adr header every %x0000000 lines
	AND #%01111111
	BNE DUMP3
	JSR DUMPHE
	JMP DUMP3

DUMP4	JSR FIXCUR
DUMPX	RTS

DUMP2	SEC
	RTS


FILL	JSR G1ADR	;FILL MEMORY
	BCS FILLX
	JSR GETHEX	;GET 2. ARGUMENT
	BCS FILLX
	STA ENDAD
	STY ENDAD+1
	JSR GETHEX	;GET BYTE
	BCS FILLX
FILL1	LDY #0
	STA (PNT),Y
	JSR CI_PNT	;check PNT=ENDAD & inc PNT if not reached
	BCC FILL1
	CLC
FILLX	RTS


SEARCH	JSR G1ADR	;Search MEMORY for up to 16 bytes
	BCS SRCHX
	JSR GETHEX	;GET 2. ARGUMENT
	BCS SRCHX
	STA ENDAD
	STY ENDAD+1
	LDA #0
	STA CNT
SRCH2	JSR GETHEX	;GET BYTES
	BCS SRCH1
	LDY CNT
	STA SRCBUF,Y
	INY
	CPY #16
	BCS SRCH9
	STY CNT
	BCC SRCH2

SRCH1	CMP #MISPAR
	BNE SRCHX
	DEC CNT
	BMI SRCH8	;no search byte
	LDA CNT
	STA MCNT	;save CNT to MCNT
	LDA #0
	STA CNT
SRCH3	LDX CNT
	LDA SRCBUF,X
	LDY #0
	CMP (PNT),Y
	BEQ SRCH4
	STY CNT
	JSR CI_PNT	;check PNT=ENDAD & inc PNT if not reached
	BCC SRCH3
SRCH5	LDA #NOT_FND
	RTS

SRCH4	CPX MCNT
	BCS SRCH6	;all bytes found!
	INC CNT		;look for next byte
	JSR CI_PNT
	BCS SRCH5
	BCC SRCH3

SRCH6	SEC		;Adjust PNT
	LDA PNT
	SBC MCNT
	STA PNT
	BCS SRCH7
	DEC PNT+1
SRCH7	JSR FIXCUR	;set CURAD = PNT
	JSR DUMPHE	;dump location
	JSR DUMPL
	CLC
	RTS

SRCH8	LDA #MISPAR
	SEC
	RTS

SRCH9	LDA #TOOMCH	;too many parameters
SRCHX	RTS



MOVE	JSR G1ADR	;MOVE TO 1. ARGUMENT
	BCS MOVEX
	JSR GETHEX	;GET 2. ARGUMENT START
	BCS MOVEX
	STA BEGAD
	STY BEGAD+1
	JSR GETHEX	;GET 3. ARGUMENT END
	BCS MOVEX
	STA ENDAD
	STY ENDAD+1
	CPY CURAD+1	;ENDAD<CURAD?
	BCC MOVE1
	CMP CURAD
	BCC MOVE1
	LDA CURAD+1	;BEGAD>CURAD?
	CMP BEGAD+1
	BCC MOVE1
	LDA CURAD
	CMP BEGAD
	BCC MOVE1
	LDA #M_OVERLAP
	RTS

MOVE1	LDA PNT+2
	PHA
	LDA PNT+3
	PHA
	LDY #0
	LDA BEGAD
	STA PNT+2
	LDA BEGAD+1
	STA PNT+3
MOVE2	LDA (PNT+2),Y
	STA (PNT),Y
	LDA PNT+3	;CHECK FOR PNT+2=ENDAD
	CMP ENDAD+1
	BCC MOVE5
	LDA PNT+2
	CMP ENDAD
	BCS MOVE3
MOVE5	INC PNT		;INC PNT
	BNE MOVE4
	INC PNT+1
MOVE4	INC PNT+2	;INC PNT+2
	BNE MOVE2
	INC PNT+3
	JMP MOVE2

MOVE3	PLA		;RESTORE PNT+2
	STA PNT+3
	PLA
	STA PNT+2
	CLC
MOVEX	RTS



GO	JSR GETHEX	;START PROGRAM
	BCS GOON
	STA PCL
	STY PCH
GOON	LDA PNTBUF	;RESTORE PNT
	STA PNT
	LDA PNTBUF+1
	STA PNT+1
	LDX STACK
	TXS
	LDA PCH
	PHA
	LDA PCL
	PHA
	LDA STATUS
	PHA
	LDX XREG
	LDY YREG
	LDA ACCU
	RTI


LIST	JSR G1ADR	;DISASSEMBLE
	BCS LISTX
	JSR GETHEX
	STA ENDAD
	STY ENDAD+1
	LDY #$80
	BCC LIST1
	CMP #MISPAR
	BNE LIST2
	LDY #14 	;14 LINES DEFAULT
LIST1	STY CNT
LISTL	LDY #0
	LDA (PNT),Y
	JSR DASM
	JSR JNEXT	;ADD OPLEN
	BIT CNT
	BPL LIST4
	JSR CHKEND
	BCC LISTL
	JSR FIXCUR
LISTX	RTS

LIST2	SEC
	RTS

LIST4	DEC CNT
	BNE LISTL
	JSR FIXCUR
	RTS


NFILE	JSR CHKNXT	;Set FCB1 to filename
	BCS NFILX
	JSR SETFCB
NFILX	RTS


RDFILE	JSR CHKNXT	;READ FILE
	BCS RDFIL1
	JSR SETFCB
	BCS RDFIL6
RDFIL2	LDA #0
	STA PAGES
	LDX #OPEN
	JSR BDOS
	BCS RDFILX
	JSR SETDMA	;DMA = TPA
RDFIL3	LDX #RDSEQ
	JSR BDOS
	BCS RDFIL4
	INC PAGES
	INC DMA+1
	BNE RDFIL3
RDFIL5	JSR RESDMA
	CLC
RDFILX	RTS

RDFIL1	CMP #MISPAR
	BEQ RDFIL2
RDFIL6	SEC
	RTS

RDFIL4	CMP #EOF
	BEQ RDFIL5
	SEC
	RTS


WRFILE	JSR CHKNXT
	BCS WRFIL1
	JSR SETFCB
	BCS WRFIL8
	JSR GETHEX
	BCS WRFIL1
	STA PAGES
WRFIL7	LDX #CREATE
	JSR BDOS
	BCS WRFIL3
WRFIL5	LDA PAGES
	BEQ WRFIL4
	STA CNT
	JSR SETDMA
WRFIL6	LDX #WRITE
	JSR BDOS
	BCS WRFILX
	INC DMA+1
	DEC CNT
	BNE WRFIL6
	JSR RESDMA
WRFIL4	LDX #CLOSE
	JSR BDOS
WRFILX	RTS

WRFIL1	CMP #MISPAR
	BEQ WRFIL7
WRFIL8	SEC
	RTS

WRFIL3	CMP #DOUBLE
	BNE WRFIL8
	LDX #OPEN
	JSR BDOS
	BCS WRFILX
	BCC WRFIL5


CHANGE	JSR G1ADR
	BCS CHANGX
	LDA #0
	STA COUNT
CHANG1	JSR GNKEY
	BCS CHANGX
	LDY COUNT
	STA (PNT),Y
	INC COUNT
	BNE CHANG1
	LDA #TOOMCH
	SEC
CHANGX	RTS


ENTER	JSR G1ADR
	BCS ENTERX
ENTER4	JSR GETHEX
	BCS ENTER3
	PHA
	JSR DUMPHE
	LDY #0
	LDA (PNT),Y
	JSR DISHEX
	PLA
	STA (PNT),Y
	JSR PRTHEX
	INC PNT
	BNE ENTER4
	INC PNT+1
	BNE ENTER4

ENTER3	CMP #MISPAR
	BNE ENTER2
	CLC
	RTS

ENTER2	SEC
ENTERX	RTS


TRACE	JSR GDEC
	BCC TRACE1
	CMP #MISPAR
	BNE TRACE2
	LDA #1
TRACE1	STA TCNT
	JSR INNBRK
	JMP GOON

TRACE2	SEC
	RTS


JUMP	LDA #$80	;JUMP DD INSTRUCTIONS
	STA JMP_FLAG
	BNE TRACE


EXREG	JSR CRLF
	JSR GNCHR
	BCS EXREG1
	CMP #';
	BEQ EXREG1
	CMP #SP
	BEQ EXREG
	JSR XXREG
	RTS

EXREG1	LDA #PCHEAD
	LDY #PCHEAD/256
	JSR PRTSTR
	LDA PCH
	JSR PRTHEX
	LDA PCL
	JSR PRTHEX
	JSR PRT2SP
	JSR DISREG
	RTS


BRKSET	JSR GETBNR	;GET BREAK NR
	BCS BRKSE1
	JSR GETHEX
	BCS BRKSEX
	STA PNT
	STY PNT+1
	LDX BYTE
	JSR SETBRK
BRKSEX	RTS

BRKSE4	SEC
	RTS

BRKSE1	CMP #MISPAR
	BNE BRKSE4
	LDY #1
	STY BRKNR
	LDY #3
BRKSE5	TYA
	PHA
	JSR DISBRK
	PLA
	TAY
	LDA BTAB,Y
	PHA
	INY
	LDA BTAB,Y
	JSR PRTHEX
	PLA
	JSR PRTHEX
	INC BRKNR
	INY
	INY
	CPY #3*MAXBNR
	BCC BRKSE5
	CLC
	RTS


KILL	JSR GETBNR
	BCS KILL1
	LDX BYTE
	JSR KILLX
	CLC
	RTS

KILL1	CMP #MISPAR
	BEQ KILL2
	SEC
	RTS

KILL2	LDX #0
KILL3	JSR KILLX
	INX
	CPX #3*MAXBNR
	BCC KILL3
	CLC
	RTS


QUIT	LDA IRQBUF
	STA IRQ	;restore old IRQ vector
	LDA IRQBUF+1
	STA IRQ+1
	LDY #CBOOT
	LDX #BIOS
	JMP BDOS


HELP	LDA #HELPM
	LDY #HELPM/256
	JSR PRTSTR
	RTS


WAIT	JSR GDEC	;WAIT NN/10 S
	BCS WAITX
	STA CNT
WAIT3	LDA #10
	STA MCNT	;100 MS
WAIT2	LDX #78
WAIT1	DEY
	BNE WAIT1
	DEX
	BNE WAIT1
	DEC MCNT
	BNE WAIT2
	DEC CNT
	BNE WAIT3
	CLC
WAITX	RTS


REPEAT	LDA RCOUNT	;REPEAT COMMAND
	BEQ REPEA1
REPEA3	DEC RCOUNT	;ONE MORE TIME
	BEQ REPEA5
	LDA #0
	STA CMDVEC
	CLC
	RTS

REPEA1	JSR GDEC	;GET NO. OF REPEATS
	BCS REPEA2
	STA RCOUNT
	CMP #0
	BNE REPEA3
	LDA #ILLPAR
REPEA4	SEC
	RTS

REPEA2	CMP #MISPAR
	BNE REPEA4
	LDA #10 	;DEFAULT 10 TIMES
	STA RCOUNT
	BNE REPEA3

REPEA5	LDA #EOL
	SEC
	RTS

;====== BREAK-ENTRY ============= 

BREAK	STA ACCU
	STY YREG
	STX XREG
	PLA
	STA STATUS
	PLA
	STA PCL
	PLA
	STA PCH
	TSX
	STX STACK
	LDA PNT
	STA PNTBUF
	LDA PNT+1
	STA PNTBUF+1
	SEC
	LDA PCL
	SBC #2		;PC=PC-2
	STA PCL
	STA PNT
	LDA PCH
	SBC #0
	STA PCH
	STA PNT+1

	LDX #0		;SEARCH FOR BX
	STX BRKNR
	LDA PNT
BREAK1	CMP BTAB,X
	BEQ BREAK3
	INX
BREAK5	INX
BREAK4	INX
	INC BRKNR
	CPX #3*MAXBNR	;LAST ENTRY?
	BCC BREAK1
	LDA #BRKERR
	JSR ERROR
BREAK7	JMP DEBUGL

BREAK3	INX
	LDA PNT+1
	CMP BTAB,X
	BNE BREAK5
	DEX
	JSR KILLX
	BCS BREAK4
	CPX #2
	BEQ BREAK2
	JSR DISBRK	;DISPLAY BREAK MESSAGE
BREAK2	LDY #0	
	LDA (PNT),Y	;GET OPCODE
	JSR DASM
	JSR DISREG
	LDY TCNT
	BEQ BREAK7
	DEC TCNT
	BEQ BREAK8
	JSR INNBRK
	JMP GOON

BREAK8	LDA #0
	STA JMP_FLAG	;RESET JUMP FLAG
	BEQ BREAK7

;======  SUBROUTINES  ============== 

INIT	LDA IRQ
	STA IRQBUF	;save IRQ vector
	LDA IRQ+1
	STA IRQBUF+1
	LDA #BREAK	;SET BREAK VEKTOR
	STA IRQ
	LDA #BREAK/256
	STA IRQ+1
	LDX #3*MAXBNR
	LDA #$FF
INIT1	STA BTAB,X
	DEX
	BPL INIT1
	LDY #1
	LDA #SP
	CMP (FCB1),Y
	BEQ INITX
	JSR RDFIL2
	RTS

INITX	CLC
	RTS


SETFCB	JSR RESFCB	;RESET FCB1
SETFC7	LDA #1
	STA CNT 	;RESET FCB POINTER
	LDA #9		;SET FILENAME
	STA MCNT
SETFC2	JSR NXTCHR
	BCS SETFC1
	CMP #'.
	BNE SETFC2
SETFC3	LDA #12 	;SET EXT
	STA MCNT
SETFC4	JSR NXTCHR
	BCS SETFC1
	CMP #'.
	BNE SETFC4
SETFC6	JSR RESFCB
	LDA #ILLPAR
	SEC
	RTS

SETFC1	CMP #',
	BEQ SETFC8
	CMP #':
	BEQ SETFC5
	CMP #SP
	BNE SETFC6
SETFC8	CLC
	RTS

SETFC5	LDY CNT
	CPY #2		;CHECK FOR DRIVE NR
	BNE SETFC6
	DEY
	LDA (FCB1),Y	;GET DRIVE CHR
	CMP #'A
	BCC SETFC6
	CMP #'I
	BCS SETFC6
	AND #$0F	;FIX DRIVE NR
	DEY
	TAX		;SAVE DRIVE NR
	LDA (FCB1),Y
	BNE SETFC6	;DRIVE NR ALREADY SET!
	JSR RESFCB
	TXA
	STA (FCB1),Y	;SET DRIVE NR
	BNE SETFC7	;NOW SET FILENAME


NXTCHR	JSR GNCHR	;GET NEXT CHR FROM INBUF
	BCS NXTCH1
	JSR CHRCHK	;CHECK CHR
	BCS NXTCHX
	CMP #SP
	BEQ NXTCHX
	CMP #'.
	BEQ NXTCH3
	LDY CNT
	CPY MCNT
	BCS NXTCHX
	STA (FCB1),Y
	INC CNT
NXTCHX	RTS

NXTCH3	LDY #1
	CPY CNT 	;'. IS INVALID AS 1. CHR
	BEQ NXTCHX
	LDY MCNT
	STY CNT
	CLC
	RTS

NXTCH1	LDA #SP 	;END OF CMD
	RTS


CHRCHK	CMP #'A 	;CHECK FOR VALID CHR
	BCC CHRCH1
	CMP #'[
	BCS CHRCH3
	RTS

CHRCH3	CMP #'a
	BCC CHRCH1
	CMP #'{
	BCS CHRCH1
	AND #$5F	;LOWER TO UPPER CASE
	RTS

CHRCH1	LDY #LENTAB-KEYTAB
CHRCH2	DEY
	BMI CHRCHX
	CMP KEYTAB,Y
	BNE CHRCH2
	CLC
	RTS

CHRCHX	SEC
	RTS


CHKNXT	JSR GNCHR
	BCS CHKNX1
	CMP #SP
	BEQ CHKNXT
	CMP #';
	BEQ CHKNX2
	DEC CMDVEC
	CLC
	RTS

CHKNX1	CMP #EOL
	BNE CHKNX3
CHKNX2	LDA #MISPAR
CHKNX3	SEC
	RTS


RESFCB	LDY #11 	;RESET FCB
	LDA #SP
RESFC1	STA (FCB1),Y
	DEY
	BNE RESFC1
	LDA #0
	STA (FCB1),Y	;SET DRIVE NR
	RTS


SETDMA	LDA DMA 	;SET DMA=TPA
	STA CCPV	;SAVE OLD DMAV
	LDA DMA+1
	STA CCPV+1
	LDA #TPA
	STA DMA
	LDA #TPA/256
	STA DMA+1
	RTS


RESDMA	LDA CCPV+1	;RESET DMA
	STA DMA+1
	LDA CCPV
	STA DMA
	RTS


KILLX	LDY #$FF	;KILL BREAKPOINT (X=BTAB POINTER)
	LDA BTAB,X
	STA PNT
	TYA
	STA BTAB,X
	INX
	LDA BTAB,X
	STA PNT+1
	TYA
	STA BTAB,X
	INX
	LDY #0
	LDA BTAB,X
	BEQ KILLX1 
	STA (PNT),Y
	TYA
	STA BTAB,X
	CLC
	RTS

KILLX1	SEC
	RTS


INNBRK	LDA PCL 	;INSTALL NEXT BREAK
	STA PNT
	LDA PCH
	STA PNT+1
	LDY #0
	LDA (PNT),Y
	BIT JMP_FLAG	;CHECK JUMP FLAG
	BMI INNBRK3
	TAX		;SAVE OPCODE
	CMP #$4C	;JMP ?
	BEQ JMP_I
	CMP #$20	;JSR ?
	BEQ JMP_I
	CMP #$60	;RTS ?
	BEQ RTS_I
	CMP #$6C	;JMP IND ?
	BEQ JMPI_I
	CMP #$40	;RTI ?
	BEQ RTI_I
	AND #$1F	;MASK OFF BRANCH INSTRUCTION
	CMP #$10
	BEQ BRA_I
	TXA
INNBRK3	JSR OPLEN
INNBRK2	JSR JNEXT
	LDA PNT
	LDY PNT+1
INNBRK1	LDX #0
	JSR SETBRK
	RTS


JMP_I	JSR SET_PNT	;SET PNT TO ARGUMENT
	JMP INNBRK1


JMPI_I	JSR SET_PNT	;JUMP INDIRECT!
	JMP JMP_I


RTI_I	LDX STACK
	INX		;SKIP STATUS BYTE
	BNE RTS_I1


RTS_I	LDX STACK
RTS_I1	INX
	LDA $100,X	;GET LOW RETURN ADDRESS
	STA PNT
	INX
	LDA $100,X	;GET HIGH RETURN ADDRESS
	STA PNT+1
	LDA #1		;PC=PC+1
	BNE INNBRK2


BRA_I	STX TEMPX	;SAVE OPCODE
	LDA #0
	ASL TEMPX	;GET FUNKTION BITS
	ROL A
	ASL TEMPX
	ROL A
	TAX
	LDA BRA_MASK,X	;GET BRANCH MASK
	AND STATUS
	BNE BRA_I1
	ASL TEMPX	;GET SWITCH BIT
	BCC BRA_I2
	LDA #2		;DON'T BRANCH
	BNE INNBRK2

BRA_I2	JSR CALC_OFF	;CALCULATE OFFSET
	STA PNT		;AND BRANCH
	STY PNT+1
	JMP INNBRK1	

BRA_I1	ASL TEMPX	;GET SWITCH BIT
	BCS BRA_I2
	LDA #2
	BCC INNBRK2

SET_PNT	INY
	LDA (PNT),Y	;GET LOW JUMP ADDRESS
	TAX		;SAVE IT
	INY
	LDA (PNT),Y	;GET HIGH JUMP ADDRESS
	STA PNT+1	;SET PNT
	TAY
	TXA
	STA PNT
	RTS


SETBRK	STA BTAB,X
	INX
	TYA
	STA BTAB,X
	INX
	LDY #0
	LDA (PNT),Y
	STA BTAB,X
	TYA
	STA (PNT),Y
	RTS


JNEXT	CLC		;JUMP TO NEXT INSTRUCTION
	ADC PNT
	STA PNT
	BCC JNEXTX
	INC PNT+1
JNEXTX	RTS


FIXCUR	LDA PNT
	STA CURAD
	LDA PNT+1
	STA CURAD+1
	CLC
	RTS


DISBRK	LDA #BRKM	;DISPLAY BREAK MESSAGE
	LDY #BRKM/256
	JSR PRTSTR
	LDA BRKNR
	JSR DISHEX
	RTS


DUMPHE	JSR PRTPC	;PRINT PC
	LDA #':
	JSR PRTCHR
	JSR PRTSP
	RTS


PRTPC	JSR CRLF
	LDA PNT+1
	JSR PRTHEX
	LDA PNT
	JSR PRTHEX
	RTS


DUMPL	JSR CRLF
	LDY #0
DUMPL1	LDA (PNT),Y
	JSR DISHEX
	INY
	CPY #8
	BNE DUMPL3
	LDA #BS
	JSR PRTCHR
DUMPL3	CPY #$10
	BCC DUMPL1
	LDY #0
DUMPL2	LDA (PNT),Y
	JSR DISASC
	INY
	CPY #$10
	BCC DUMPL2
	TYA
	JSR JNEXT
	JSR CHKEND
	RTS


CI_PNT	JSR CHKEND
	BCS CIPNTx
	INC PNT
	BNE CIPNTx
	INC PNT+1
CIPNTx	RTS


CHKEND	LDY PNT+1
	CPY ENDAD+1
	BCC CHKENX
	BNE CHKENX
	LDY PNT
	CPY ENDAD
CHKENX	RTS


XXREG	LDY #3
XXREG1	CMP RTAB,Y
	BEQ XXREG2
	DEY
	BPL XXREG1
	BMI XFLAG

XXREG2	STY TEMPA
	JSR PRTREG
	JSR PRT2SP
	JSR GKHEX
	BCS XXREG3
	LDY TEMPA
	STA ACCU,Y
	JSR PRTHEX
XXREG4	CLC
	RTS

XXREG3	CMP #MISPAR
	BEQ XXREG4
	SEC
	RTS


XFLAG	LDY #7
XFLAG1	CMP FTAB,Y	;SEARCH FLAG
	BEQ XFLAG2
	DEY
	BPL XFLAG1
XFLAG7	LDA #ILLPAR
	SEC
	RTS

XFLAG2	STY FLAGNR	;PRINT FLAG MESSAGE
	JSR PRTCHR
	LDA #'=
	JSR PRTCHR
	LDA STATUS
XFLAG3	ROR A		;ISOLATE FLAG-BIT
	DEY
	BPL XFLAG3
	LDA #%00011000
	ROL A
	JSR PRTCHR
	JSR PRT2SP
	JSR GKHEX
	BCS XFLAG4
	LDY FLAGNR
XFLAG5	ROR STATUS	;SET FLAG
	DEY
	BPL XFLAG5
	CMP #0
	BEQ XFLAG6
	CMP #1
	BNE XFLAG7
XFLAG6	PHA
	ORA #$30
	JSR PRTCHR
	PLA
	LSR A
	LDY FLAGNR
XFLAG8	ROL STATUS
	DEY
	BPL XFLAG8
XFLAG9	CLC
	RTS

XFLAG4	CMP #MISPAR
	BEQ XFLAG9
	SEC
	RTS


DISREG	LDY #0
DISRE1	JSR PRTREG
	INY
	CPY #4		;4 REGISTERS
	BCC DISRE1
	JSR DISFLAGS	;DISPLAY FLAGS
	RTS


PRTREG	LDA RTAB,Y	;PRINT A REGISTER
	JSR PRTCHR
	LDA #'=
	JSR PRTCHR
	LDA ACCU,Y
	
DISHEX	JSR PRTHEX	;DISPLAYS A HEX
	JSR PRTSP
	RTS


DISFLAGS
	LDY #7
	LDA STATUS
	STA TEMPA
DISFL1	LDA FTAB,Y
	CMP #'U
	BEQ DISFL3
	JSR PRTCHR
	ROL TEMPA
	LDA #%00011000
	ROL A
	JSR PRTCHR
DISFL2	DEY
	BPL DISFL1
	CLC
	RTS

DISFL3	ROL TEMPA
	JMP DISFL2


DISASC	AND #$7F
	CMP #$20
	BCC DISAS1
	CMP #$7F
	BCC DISAS2
DISAS1	LDA #'.
DISAS2	JSR PRTCHR
	RTS


GETBNR	JSR GDEC	;GET A BREAK NR
	BCS GETBNX
	CMP #MAXBNR
	BCS GETBN1
	STA BYTE
	ASL A
	CLC
	ADC BYTE	; *3
	STA BYTE
GETBNX	RTS

GETBN1	LDA #ILLPAR
	SEC
	RTS


G1ADR	JSR GETHEX
	BCC G1ADR1
	CMP #MISPAR
	BNE G1ADR2
	LDA CURAD
	LDY CURAD+1
G1ADR1	STA PNT
	STA CURAD
	STY PNT+1
	STY CURAD+1
	CLC
	RTS

G1ADR2	SEC
	RTS


GDEC	JSR GETHEX	;GETS A DECIMAL FROM LINE
	BCS GDECX
	AND #$0F
	CMP #10
	BCS GDEC1
	STA NUMBER	;EINER
	LDA HEX
	AND #$F0
	LSR A		;ZEHNER*8
	PHA
	CLC
	ADC NUMBER
	STA NUMBER
	PLA
	LSR A
	LSR A		;ZEHNER*2
	CLC
	ADC NUMBER
	CPY #3		;Y=HEXH
	BCS GDEC1
GDEC5	DEY
	BMI GDEC4
	ADC #100
	BCC GDEC5
GDEC1	LDA #ILLPAR
	SEC
GDECX	RTS

GDEC4	STA NUMBER
	CLC
	RTS


GKHEX	JSR GNCHR
	BCS GKHEX1
	CMP #';
	BEQ GKHEX1
	CMP #',
	BNE GKHEX2
	JSR GETHEX
	RTS

GKHEX1	LDA #MISPAR
	SEC
	RTS

GKHEX2	LDA #ILLPAR
	SEC
	RTS


GETHEX	LDA #0 	;GET HEX NUMBER FROM LINE
	STA HEX	;RESET HEX
	STA HEX+1
	TAX
GETHE2	JSR GETNIB	;GET NIBBLE TO HEX
	BCS GETHE1
	INX
	CPX #5
	BCC GETHE2
GETHE5	LDA #ILLPAR	;ILLEGAL PARAMETER
	SEC
	RTS

GETHE1	CPX #0
	BNE GETHE3
	CMP #SP
	BEQ GETHE2
	CMP #EOL
	BEQ GETHE6
	CMP #';
	BNE GETHE5
GETHE6	LDA #MISPAR
	SEC
	RTS

GETHE3	CMP #';
	BEQ GETHE4
	CMP #',
	BEQ GETHE4
	CMP #EOL
	BNE GETHE5
GETHE4	LDA HEX
	LDY HEX+1
	CLC
	RTS


GETNIB	JSR GNCHR	;GET NIBBLE TO HEX
	BCS GETNIX
	CMP #'0
	BCC GETNI1
	CMP #$3A
	BCC GETNI2
	CMP #'A
	BCC GETNI1
	CMP #'G
	BCC GETNI3
GETNI1	SEC
GETNIX	RTS

GETNI3	CLC
	ADC #9
GETNI2	AND #$0F
	LDY #4
GETNI4	ASL HEX
	ROL HEX+1
	DEY
	BNE GETNI4
	ORA HEX
	STA HEX
	CLC
	RTS


GNCHR	JSR GNKEY
	BCS GNCHRX
	JSR UPCASE
	CLC
GNCHRX	RTS


GNKEY	LDY #0
	INC CMDVEC
	LDA CMDVEC
	CMP (INBUF),Y
	BCS GNKEYX
	TAY
	LDA (INBUF),Y
	RTS

GNKEYX	LDA #EOL
	RTS


UPCASE	CMP #'a 	;LOWER --> UPPER CASE
	BCC UPCASX
	CMP #'~
	BCS UPCASX
	AND #$5F
UPCASX	RTS


PRTDEC	JSR COMNUM	;PRINTS DECIMAL
	PHA
	TYA
	JSR COMNUM
	PHA
	TYA
	JSR PRTNUM
	PLA
	JSR PRTNUM
	PLA
	JSR PRTNUM
	RTS


COMNUM	LDY #0		;DIV/10
COMNU1	SEC
	SBC #10
	BCC COMNU2
	INY
	BNE COMNU1

COMNU2	ADC #10
	RTS


PRTNUM	ORA #$30	;PRINT A NUMBER
	JMP PRTCHR


DASM	STA OPCODE	;DISASSEMBLE 1 LINE
	JSR PRTPC
	JSR PRTSP
	LDA OPCODE
	JSR OPLEN
	STA LENGTH
	STA XCNT
	LDA OPCODE
	JSR DISHEX
	LDY #1
	DEC XCNT
	BEQ DASM3	;1 BYTE OPCODE
DASM1	LDA (PNT),Y
	JSR PRTHEX
	INY
	DEC XCNT
	BNE DASM1
DASM3	CPY #4
	BCS DASM2
	JSR PRT2SP
	INY
	BNE DASM3

DASM2	JSR PRTSP
	LDA #4
	CMP LENGTH
	BEQ DASM4
	JSR MNEM
	LDA LENGTH
DASMX	RTS

DASM4	JSR ILLOPC
	LDA LENGTH
	RTS


OPLEN	LDX #1
	CMP #0
	BEQ OPLENX
	CMP #$40
	BEQ OPLENX
	CMP #$60
	BEQ OPLENX
	LDX #3
	CMP #$20
	BEQ OPLENX
	AND #$1F
	CMP #$19
	BEQ OPLENX
	AND #$0F
	TAX
	LDA LENTAB,X
	RTS

OPLENX	TXA
	CLC
	RTS


MNEM	LDA OPCODE
	AND #$0F	;RIGHT NIBBLE
	ASL A
	TAX
	LDA SRTAB,X
	PHA
	INX
	LDA SRTAB,X
	PHA
	LDA OPCODE
	LSR A		;HIGH NIBBLE
	LSR A
	LSR A
	LSR A
	RTS


ILLOPC	LDA #ILLOPM
	LDY #ILLOPM/256
	JSR PRTSTR
	LDY #3
	JSR PRTSPC
	RTS


SR0	LSR A
	BCC SR0A
	LDY #TAB0-TAB0
	JSR PRTMNE
	LDA #'$
	JSR PRTCHR
	JSR CALC_OFF
	PHA
	TYA
	JSR PRTHEX
	PLA
	JSR PRTHEX
SR0F	LDY #5
	JSR PRTSPC
	RTS

SR0A	CMP #4
	BCS SR0C
	PHA
	LDY #TAB01-TAB0
	JSR PRTMNE
	PLA
	CMP #1
	BEQ SR0D
	LDY #10
	JSR PRTSPC
	RTS

SR0D	JSR PRTWRD
	JMP SR0F

SR0C	BNE SR0E
	JMP ILLOPC

SR0E	LDY #TABC-TAB0
	JSR PRTMNE
	JSR PRTIMM
	RTS


SR1	LSR A
	ROR TEMPY
	LDY #TAB1-TAB0
	JSR PRTMNE
	LDA #'(
	JSR PRTCHR
	JSR PRTBYT
	BIT TEMPY
	BMI SR11
	JSR PRTKMX
	LDA #')
	JSR PRTCHR
	JMP SR12

SR11	LDA #')
	JSR PRTCHR
	JSR PRTKMY
SR12	LDY #3
	JSR PRTSPC
	RTS


SR2	CMP #$0A
	BEQ SR2A
SR2B	JSR ILLOPC
	RTS

SR2A	LSR A
	LDY #TAB6-TAB0
	JSR PRTMNE
	JSR PRTIMM
	RTS


SR4	TAX
	LDA TAB4,X
	BNE SR4A
	JMP ILLOPC

SR4A	TXA
	LDY #TABC-TAB0
SR4D	LSR A
	ROR TEMPY
	JSR PRTMNE
	JSR PRTBYT
	BIT TEMPY
	BMI SR4B
SR4E	LDY #7
SR4C	JSR PRTSPC
	RTS

SR4B	JSR PRTKMX
SR4F	LDY #5
	BNE SR4C


SR5	LDY #TAB1-TAB0
	JMP SR4D


SR6	LSR A
	ROR TEMPY
	PHA
	LDY #TAB6-TAB0
	JSR PRTMNE
	JSR PRTBYT
	PLA
	BIT TEMPY
	BPL SR4E
	CMP #4
	BCC SR4B
	CMP #6
	BCS SR4B
	JSR PRTKMY
	JMP SR4F


SR8	LDY #TAB8-TAB0
SR8A	JSR PRTMNE
	LDY #10
	JMP PRTSPC


SR9	CMP #8
	BNE SR9A
	JMP ILLOPC

SR9A	LSR A
	ROR TEMPY
	LDY #TAB1-TAB0
	JSR PRTMNE
	BIT TEMPY
	BMI SR9B
	JSR PRTIMM
	RTS

SR9B	JSR PRTWRD
	JSR PRTKMY
	LDY #3
	JSR PRTSPC
	RTS


SRA	BIT OPCODE
	BMI SRA1
	LSR A
	BCC SRA2
SRA3	JMP ILLOPC

SRA2	LDY #TAB6-TAB0
	JSR PRTMNE
	LDA #'A
	JSR PRTCHR
	LDY #9
	JMP PRTSPC

SRA1	LDY #TABA-TAB0
	AND #%00000111		;MASK BIT 3
	JMP SR8A


SRC	TAX
	LDA TABC1,X
	BNE SRC1		;VALID OPCODE?
	JMP ILLOPC

SRC1	PHA
	TXA
	LSR A
	LDY #TABC-TAB0
	JSR PRTMNE
	PLA
	PHA
	CMP #3
	BNE SRC2
	LDA #'(
	JSR PRTCHR
SRC2	JSR PRTWRD
	PLA
	CMP #1		;ABS
	BEQ SRC3
	CMP #2		;ABS,X
	BEQ SRC4
	LDA #')
	JSR PRTCHR
	LDY #4
SRC5	JMP PRTSPC

SRC3	LDY #5
	BNE SRC5

SRC4	JSR PRTKMX
	LDY #3
	BNE SRC5


SRD	LSR A
	ROR TEMPY
	LDY #TAB1-TAB0
	JSR PRTMNE
	JSR PRTWRD
	BIT TEMPY
	BMI SRC4
	BPL SRC3


SRE	STA TEMPA
	CMP #9
	BNE SRE1
	JMP ILLOPC

SRE1	LSR A
	ROR TEMPY
	LDY #TAB6-TAB0
	JSR PRTMNE
	JSR PRTWRD
	BIT TEMPY
	BMI SRE2
	LDY #5
	JMP PRTSPC

SRE2	LDA TEMPA
	CMP #$0B
	BNE SRE3
	JSR PRTKMY
	JMP SRE4

SRE3	JSR PRTKMX
SRE4	LDY #3
	JMP PRTSPC


CALC_OFF		;CALCULATE OFFSET FOR BRANCH INSTRUCTION
	LDA #0
	STA OFFH
	LDY #1
	LDA (PNT),Y	;GET OFFSET
	BPL CALC_OFF1
	DEC OFFH
CALC_OFF1
	CLC		;+START ADDRESS
	ADC PNT
	TAX
	LDA PNT+1
	ADC OFFH
	STA OFFH
	TXA
	CLC
	ADC #2		;+2
	TAX
	LDA OFFH
	ADC #0
	TAY
	TXA
	RTS
PRTMNE	STA OFFH
	ASL A		;*2
	CLC
	ADC OFFH	;*3
	STA OFFH
	TYA
	ADC OFFH	;+OFFSET
	TAY
	LDA TAB0,Y
	JSR PRTCHR
	INY
	LDA TAB0,Y
	JSR PRTCHR
	INY
	LDA TAB0,Y
	JSR PRTCHR
	JSR PRTSP
	RTS


PRTWRD	LDA #'$
	JSR PRTCHR
	LDY #2
	LDA (PNT),Y
	JSR PRTHEX
	DEY
	LDA (PNT),Y
	JMP PRTHEX


PRTIMM	LDA #'#
	JSR PRTCHR
	JSR PRTBYT
	LDY #6
	JSR PRTSPC
	RTS


PRTBYT	LDA #'$
	JSR PRTCHR
	LDY #1
	LDA (PNT),Y
	JSR PRTHEX
	RTS


PRTSPC	LDA #SP
	JSR PRTCHR
	DEY
	BNE PRTSPC
	RTS


PRTKMX	LDA #',
	JSR PRTCHR
	LDA #'X
	JMP PRTCHR


PRTKMY	LDA #',
	JSR PRTCHR
	LDA #'Y
	JMP PRTCHR


ERROR	STA ERRNO	;ERROR ROUTINE
	JSR CRLF
	LDA #ERRTAB	;SET CCPV
	STA CCPV
	LDA #ERRTAB/256
	STA CCPV+1
	LDY #0		;CHECK ERROR CODE
	LDA (CCPV),Y
ERROR1	BEQ ERROR4	;END OF ERROR ROUTINE
	CMP ERRNO
	BEQ ERROR3
ERROR2	JSR INCCPV	;SKIP ERROR MESSAGE
	BNE ERROR2
	JSR INCCPV
	JMP ERROR1

ERROR3	JSR INCCPV
	PHA
	JSR ERRTYP	;PRINT ERROR TYPE
	JSR INCCPV
	LDA CCPV	;PRINT ERROR MESSAGE
	LDY CCPV+1
	JSR PRTSTR
	PLA
	BPL ERROR5
	JSR ASKRTY	;ASK FOR RETRY
	LDA ERRNO
	RTS

ERROR4	JSR UETYP	;UNKNOWN ERROR
ERROR5	SEC
	RTS


ERRTYP	LDY #0		;PRINT ERROR TYPE
ERRTY1	LSR A
	BCS ERRTY2
	INY		;X=X+5
	INY
	INY
	INY
	INY
	BNE ERRTY1

ERRTY2	LDA ETYPTB,Y
	BEQ UETYP	;LAST CHR?
	JSR PRTCHR
	INY
	BNE ERRTY2

UETYP	LDA #ERRM1
	LDY #ERRM1/256
	JSR PRTSTR
	LDA ERRNO
	JSR PRTHEX

CRLF	LDA #CRLFM
	LDY #CRLFM/256

PRTSTR	LDX #STROUT
	JMP BDOS


PRT2SP	JSR PRTSP


PRTSP	LDA #SP


PRTCHR	LDX #CONOUT	;PRINTS A CHR
	JMP BDOS


INCCPV	INC CCPV	;INC CCPV
	BNE INCCP1
	INC CCPV+1
INCCP1	LDA (CCPV),Y
	RTS


ASKRTY	LDA #RTYMES	;RETRY?
	LDY #RTYMES/256
	JSR PRTSTR
	LDX #CONIN
	JSR BDOS
	JSR UPCASE
	CMP #'Y
	BNE ASKRT1
	CLC
	RTS

ASKRT1	SEC
	RTS


PRTHEX	PHA
	LSR A
	LSR A
	LSR A
	LSR A
	JSR PRTNIB
	PLA
	AND #$0F

PRTNIB	CMP #$0A
	BCC PRTNI1
	ADC #6
PRTNI1	ADC #$30
	JSR PRTCHR
	RTS

;======	VARIABLES ======== 

ACCU	DB 0
XREG	DB 0
YREG	DB 0
STACK	DB $FF
STATUS	DB 0
PCL	DB TPA
PCH	DB TPA/256
CMDVEC	DB 0
CMDKEY	DB 0
RCOUNT	DB 0
BYTE	DB 0
TEMPA	DB 0
TEMPX	DB 0
TEMPY	DB 0
OFFH	DB 0
BRKNR	DB 0
ERRNO	DB 0
COUNT	DB 0
CNT	DB 0
XCNT	DB 0
TCNT	DB 0
MCNT	DB 0
NUMBER	DB 0
OPCODE	DB 0
LENGTH	DB 0
PAGES	DB 0
FLAGNR	DB 0
JMP_FLAG	DB 0

HEX	DW 0
PNTBUF	DW 0
BEGAD	DW 0
ENDAD	DW 0
CURAD	DW TPA

IRQBUF	DW 0

SRCBUF	DS 16

;======	TABLES ====== 

KEYTAB	DB ' !#$&+-./@^_'
	DB '0123456789'
LENTAB	DB 2,2,2,4,2,2,2,4,1,2,1,4,3,3,3,4
RTAB	DB 'AXYS'
FTAB	DB 'CZIDBUVN'

CMDTAB	DB 'L'
	DD LIST-1
	DB 'D'
	DD DUMP-1
	DB 'C'
	DD CHANGE-1
	DB 'R'
	DD RDFILE-1
	DB 'W'
	DD WRFILE-1
	DB 'N'
	DD NFILE-1
	DB 'Q'
	DD QUIT-1
	DB '?'
	DD HELP-1
	DB 'Z'
	DD WAIT-1
	DB 'F'
	DD FILL-1
	DB 'S'
	DD SEARCH-1
	DB 'M'
	DD MOVE-1
	DB 'G'
	DD GO-1
	DB '/'
	DD REPEAT-1
	DB 'B'
	DD BRKSET-1
	DB 'E'
	DD ENTER-1
	DB 'K'
	DD KILL-1
	DB 'X'
	DD EXREG-1
	DB 'T'
	DD TRACE-1
	DB 'J'
	DD JUMP-1

	DB $00


SRTAB	DD SR0-1, SR1-1, SR2-1, ILLOPC-1	;SUROUTINE TABLE
	DD SR4-1, SR5-1, SR6-1, ILLOPC-1
	DD SR8-1, SR9-1, SRA-1, ILLOPC-1
	DD SRC-1, SRD-1, SRE-1, ILLOPC-1

TAB0	DB 'BPLBMIBVCBVSBCCBCSBNEBEQ'
TAB1	DB 'ORAANDEORADCSTALDACMPSBC'
TAB6	DB 'ASLROLLSRRORSTXLDXDECINC'
TAB8	DB 'PHPCLCPLPSECPHACLIPLASEI'
	DB 'DEYTYATAYCLVINYCLDINXSED'
TABA	DB 'TXATXSTAXTSXDEX???NOP???'
TABC	DB '???BITJMPJMPSTYLDYCPYCPX'
TAB01	DB 'BRKJSRRTIRTS'

TAB4	DB 0,0,1,0,0,0,0,0	;1=Z  2=Z,X
	DB 1,2,1,2,1,0,1,0
TABC1	DB 0,0,1,0,1,0,3,0	;1=ABS  2=ABS,X  3=(IND)
	DB 1,0,1,2,1,0,1,0

BRA_MASK
	DB $80,$40,$01,$02

;======	MESSAGES ====== 

ERRM1	DB ' Error $',EOT
RTYMES	DB CR,LF,'Retry	(Y/N) ? ',EOT

ETYPTB	DB 'BIOS',$00,'BDOS',$00,'CCP',$00,$00
	DB 'RSX',$00,$00,'USER',$00

ERRTAB	DB $F9,$01,'Invalid Drive',EOT
	DB $DE,$82,'Directory full',EOT
	DB $DD,$82,'File not found',EOT
	DB $DC,$02,'File exists',EOT
	DB $D9,$02,'Invalid FCB',EOT
	DB $D8,$82,'Disk full',EOT
	DB $D6,$82,'File is R/O',EOT
	DB $91,$10,'Illegal BREAK found',EOT
	DB $86,$10,'not found',EOT
	DB $85,$10,'Address overlap in move',EOT
	DB $84,$10,'End of Line',EOT
	DB $83,$10,'Too Much Parameters',EOT
	DB $82,$10,'Illegal Parameter',EOT
	DB $81,$10,'Missing Parameter',EOT
	DB $80,$10,'Unknown Command',EOT

	DB $00

PROMPT	DB CR,LF,'DEBUG V',VERSION/16+$30,'.',VERSION*$1000/$1000+$30,' >',EOT

CRLFM	DB CR,LF,EOT

BRKM	DB CR,LF,'Breakpoint Nr. ',EOT
ILLOPM	DB '???',EOT
PCHEAD	DB 'PC=',EOT

HELPM	DB CLS,'	DEBUG V',VERSION/16+$30,'.',VERSION*$1000/$1000+$30
	DB '	                 (c) 14.6.1990',CR,LF
	DB 'Command Summary:',CR,LF
	DB ' Dnnnn,mmmm	dump memory	    '
	DB ' Fnnnn,mmmm,cc fill memory',CR,LF
	DB ' Gnnnn	go from nnnn	    '
	DB ' Znn	wait for nn/10 s',CR,LF
	DB ' Lnnnn,mmmm	list mnemonics      '
	DB ' Ennnn,bb,bb.. enter bytes ',CR,LF
	DB ' Rfilename.ext read file	    '
	DB ' Wfilename.ext write file',CR,LF
	DB ' Nfilename.ext FCB1=filename    ',CR,LF
	DB ' Cnnnn,<string>     enter string'
	DB ' Snnnn,mmmm,bb,..   search bytes',CR,LF
	DB ' Tdd        trace dd steps      '
	DB ' Xr,bb	set register',CR,LF
	DB ' Jdd        jump dd opcodes     '
	DB ' Mn,m,j     move to n from m,j',CR,LF
	DB ' Bd,nnnn	set breakpoint      '
	DB ' Kd		kill breakpoint',CR,LF
	DB ' ?	        prints this screen  '
	DB ' ;          command separator',CR,LF
	DB ' /dd        repeat dd times     '
	DB ' Q		quit to CP/M',CR,LF
	DB EOT

BTAB	DB 0

	END
