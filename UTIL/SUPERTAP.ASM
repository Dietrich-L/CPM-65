;Supertape - Programmpaket
;FUER SUPERTAPE READ UND WRITE

;(C) D. LAUSBERG	1987
;V1.0		19.11.87
;V1.1		8.12.90		CP/M-65 Version
;V1.2		23.12.90	ASM-65 Version
;V1.3		31.12.90	some corrections
;V1.4		10.03.95	new memory map

;================================================

;KONSTANTEN

EOT	= $00
CR	= $0D
LF	= $0A
ESC	= $1B
SP	= $20

; BDOS COMMANDS

CONIN	= $01
CONOUT	= $02
STROUT	= $09
OPEN	= $0F
CLOSE	= $10
READ	= $14
WRITE	= $15
CREATE	= $16

;SYSTEMADRESSEN

TPA	= $0200
ZERO	= $00		;ZERO PAGE

;Page 00 cells of SUTAP

XFLAG	= ZERO		;BUFFER FOR XFLAG
TAPEVL	= 1		;ZEIGER AUF BYTE
TAPEVH	= 2
TAPELL	= 3		;BYTEZAEHLER
TAPELH	= 4
PAGES	= 5
ERRNO	= 6		;ERROR NUMBER
TEMP	= 7		;TEMPORARY BUFFER
BAUD	= 9		;BAUDRATE
VFLAG	= 10		;LOAD/VERIFY FLAG
BLOCKA	= 11		;BLOCK ADRESS MARK
LBYTE	= 12		;LAST BYTE
BPORT	= LBYTE		;PORT BYTE BUFFER
PRBUFL	= 13		;CHECKSUM BUFFER
PRBUFH	= 14
PRCNTL	= 15	 	;CHECKSUM COUNTER
PRCNTH	= 16
BCNTL	= 17	 	;BYTE COUNTER
BCNTH	= 18
IBYTE	= 19	 	;INPUT BYTE
WTIME0	= 20 		;TIMER CONSTANT FOR 0
WTIME1	= 21 		;TIMER CONSTANT FOR 1
WSCNT	= 22 		;SYNC COUNTER
LVFLAG	= 23 		;VFLAG BUFFER
PARBUF	= $20
BUF	= $40

CCPV	= $DE
BDOS	= $F0
FCB1	= $F6
DMA	= $FE

;I/O-PORTS
;6532 RIOT
PORT	= $F680		;OUTPUT PORT
BREAKP	= $F680		;PORT FOR BREAK
PADD	= $F681		;PORT DATA DIRECTION
PBD	= $F682		;PORT B DATA
;6522 VIA
IFR	= $F40D		;IRQ FLAG REGISTER
IER	= $F40E		;IRQ ENABLE REGISTER
ACR	= $F40B		;AUX CONTROL REGISTER
T2L	= $F408		;TIMER 2 LOW BYTE
T2H	= $F409		;TIMER 2 HIGH BYTE

;ZEIT-KONSTANTEN

; WTAPE
LSS0	= 102		;3600 BAUD 0-BIT
LSS1	= 240		;3600 BAUD 1-BIT
HSS0	= 33		;7200 BAUD 0-BIT
HSS1	= 101		;7200 BAUD 1-BIT

;RTAPE
LSL	= 179		;3600 BAUD
HSL	= 76		;7200 BAUD

;PARAMETER-BLOCK

PFNAME	= 0	;FILENAME
PFLAG	= 16	;FLAG
PSTART	= 17	;START-ADRESS
PLEN	= 19	;FILE-LENGTH
HDLEN	= 25	;HEADER-LENGTH

BLMARK	= $C5	;DATA BLOCK MARK
HDMARK	= $2A	;HEADER MARK
SYNC	= $16	;SYNC BYTE

OUTMSK	= %00100000	;MASK OUTPUT BIT
TIMMSK	= %00100000	;MASK TIMER-2 BIT

; ERROR CODES

ERR1	= $81		;READ ERROR
ERR2	= $82		;CHECKSUM ERROR
ERR3	= $83		;VERIFY ERROR
ERR4	= $84		;READ BREAK
ERR5	= $85		;WRITE BREAK

EOF	= $D7
NOTFND	= $DD

;========================================================

	ORG TPA

START	LDA #0
	STA PAGES
	LDA #STARTM
	LDY #STARTM/256
	JSR PRTSTR
	LDY #1
	LDA (FCB1),Y
	CMP #SP
	BEQ START2
	LDA #WRM1	;WRITE TO TAPE
	LDY #WRM1/256
	JSR PRTSTR
START5	LDX #OPEN
	JSR BDOS
	BCS STERR
START4	JSR SETDMA
START1	LDX #READ
	JSR BDOS
	INC PAGES
	INC DMA+1
	LDA DMA+1
	CMP BDOS+2	;check for HIMEM
	BCC START1
	CMP #EOF
	BNE STERR
	LDA #WRM2	;PRINT MESSAGE
	LDY #WRM2/256
	JSR PRTSTR
	LDX #CONIN	;WAIT FOR KEY
	JSR BDOS
	JSR SETPW
	JSR WTAPE
	BCS STERR
	BCC BOOT

START2	LDA #READM	;READ FILE
	LDY #READM/256
	JSR PRTSTR
	DEC PAGES
	JSR SETPR
	JSR RTAPE
	BCS STERR
	JSR SETDMA
	JSR SETFCB
	JSR FOPEN
	BCS STERR
START3	LDX #WRITE
	JSR BDOS
	BCS STERR
	JSR INCDMA
	BCC START3
	LDX #CLOSE
	JSR BDOS
	BCS STERR
BOOT	LDA #ENDM
	LDY #ENDM/256
	JSR PRTSTR
	LDX #0
	JMP BDOS

STERR	JSR ERROR
	BCS BOOT
	JMP START

;=======================================

FOPEN	LDX #OPEN
	JSR BDOS
	BCS FOPEN1
	RTS

FOPEN1	CMP #NOTFND
	BNE FOPEN2
	LDX #CREATE
	JSR BDOS
	RTS

FOPEN2	SEC
	RTS


SETDMA	LDA #LOMEM
	STA DMA
	LDA #LOMEM/256
	STA DMA+1
	RTS


INCDMA	INC DMA+1
	INC PAGES
	LDX #PLEN+1
	LDA PAGES
	CMP BUF,X
	RTS

SETFCB	LDX #0
	LDY #1
SETFC1	LDA BUF,X
	STA (FCB1),Y
	INX
	INY
	CPY #9
	BCC SETFC1
	LDX #13
SETFC2	LDA BUF,X
	STA (FCB1),Y
	INX
	INY
	CPY #12
	BCC SETFC2
	RTS


SETPR	LDA #SP
	LDX #15
SETPR1	STA PARBUF,X
	DEX
	BPL SETPR1
	LDA #'*
	INX
	STA PARBUF,X
	LDX #13
	STA PARBUF,X
	DEX
	LDA #'.
	STA PARBUF,X
	LDA #0
	LDX #23
SETPR2	STA PARBUF,X
	DEX
	CPX #15
	BNE SETPR2
	LDX #17
	LDA #LOMEM
	STA PARBUF,X
	INX
	LDA #LOMEM/256
	STA PARBUF,X
	LDA #0
	LDX #1
	RTS


SETPW	LDY #1
	LDX #23
	LDA #0
SETPW1	STA PARBUF,X
	DEX
	CPX #15
	BNE SETPW1
	LDA #SP
SETPW2	STA PARBUF,X
	DEX
	BPL SETPW2
	INX
SETPW3	LDA (FCB1),Y
	STA PARBUF,X
	INX
	INY
	CPY #9
	BCC SETPW3
	LDX #12
	LDA #'.
	STA PARBUF,X
	INX
SETPW4	LDA (FCB1),Y
	STA PARBUF,X
	INX
	INY
	CPY #12
	BCC SETPW4
	INX
	LDA #LOMEM
	STA PARBUF,X
	INX
	LDA #LOMEM/256
	STA PARBUF,X
	INX
	INX
	LDA PAGES
	STA PARBUF,X
	LDA #0
	RTS

;==========================================

;Grundroutinen	RTAPE - liest ein File ein
;		WTAPE - schreibt ein File

RTAPE   STA LVFLAG	;READ FILE IN MEMORY
	STX XFLAG 	;A =  00 (READ) OR 01 (VERIFY)
	CLD	 	;X =  00 (USE FILE-PARB)
	JSR INIT	;     01 (USE USER-PARB)
	JSR SRCHF	;SEARCH FILE
	BCS RTAPEX
	LDX #PSTART	;SET START ADRESS
	LDA PARBUF,X
	STA TAPEVL
	INX
	LDA PARBUF,X
	STA TAPEVH
	LDA XFLAG	;USE FILE PARAMETERS
	BNE RELO 	;NO
	DEX  			;YES
	LDA BUF,X
	STA TAPEVL
	INX
	LDA BUF,X
	STA TAPEVH
RELO	INX
	LDA BUF,X	;BLOCK LENGTH
	STA TAPELL
	INX
	LDA BUF,X
	STA TAPELH
	INX
	LDA BUF,X	;BAUDRATE
	STA BAUD
	LDA #BLMARK
	STA BLOCKA
	LDA LVFLAG	;SET VFLAG
	STA VFLAG
	JSR BLOAD	;LOAD BLOCK
	CLI		;ALLOW IRQ'S
	BCS RTAPEX
	JSR SHFNAM	;SHOW FILENAME
RTAPEX	RTS		;DONE


WTAPE   STA BAUD 	;WRITE FILE TO TAPE
	LDX #PFLAG	;A =  00 (3600 BAUD) OR
	CLD		;     01 (7200 BAUD)
	STA PARBUF,X
	JSR INIT 	;INITIALIZE PORTS
	JSR WPARB	;WRITE PARAMETER BLOCK
	BCS WTAPX
	JSR DELAY	;0.3 S DELAY
	LDX #PSTART
	LDA PARBUF,X
	STA TAPEVL	;SET START ADRESS
	INX
	LDA PARBUF,X
	STA TAPEVH
	INX
	LDA PARBUF,X
	STA TAPELL	;SET FILE LENGTH
	INX
	LDA PARBUF,X
	STA TAPELH
	LDA #BLMARK	;SET BLOCK MARK
	STA BLOCKA
	JSR BSAVE
WTAPX	RTS		;DONE

;===  WRITE PARAMETER BLOCK

WPARB   LDA #PARBUF	;SET BLOCK ADRESS
	STA TAPEVL
	LDA #PARBUF/256
	STA TAPEVH
	LDA #HDLEN	;SET HEADER LENGTH
	STA TAPELL
	LDA #0
	STA TAPELH
	LDA #0   	;SET TO 3600 BAUD
	STA BAUD
	LDA #HDMARK	;HEADER MARK
	STA BLOCKA
	JSR BSAVE	;SAVE BLOCK TO TAPE
	RTS

;===  READ PARAMETER BLOCK

RPARB   LDA #BUF 	;SET BUFFER ADDRESS
	STA TAPEVL
	LDA #BUF/256
	STA TAPEVH
	LDA #HDLEN	;SET HEADER LENGTH
	STA TAPELL
	LDA #0
	STA TAPELH
	LDA #0   	;SET TO 3600 BAUD
	STA BAUD
	STA VFLAG	;SET TO NO VERIFY
	LDA #HDMARK	;SET HEADER MARK
	STA BLOCKA
	JSR BLOAD	;LOAD BLOCK
	RTS

;SHOW FILENAME

SHFNAM	JSR CRLF 	;DO CR + LF
	LDX #0
SHFNA1	TXA
	PHA
	LDA BUF,X
	JSR PRTCHR	;DISPLAY A CHR
	PLA
	TAX
	INX
	CPX #PFLAG	;WAS IT THE LAST ONE?
	BNE SHFNA1
	JSR CRLF 	;DO A NEWLINE
	RTS

;SEARCH FILE

SRCHF   JSR RPARB	;READ PARAMETER BLOCK
	BCS SRCHFX
	LDX #PFNAME	;COMPARE FILENAME
CFLOOP	LDA PARBUF,X
	CMP #'*  	;WILDCARD ?
	BEQ TYPCHK	;NAME OK
	CMP #'?  	;WILDCARD ?
	BEQ NEXTCF	;CHR OK
	CMP BUF,X	;COMPARE CHR
	BNE SRCHF	;NEXT TRY
NEXTCF	INX		;NEXT CHR
	CPX #12  	;CHR'S LEFT
	BCC CFLOOP
TYPCHK	LDX #12  	;CHECK FILE TYPE
TFLOOP	LDA PARBUF,X
	CMP #'*  	;WILDCARD ?
	BEQ RPROG	;FILETYPE OK
	CMP #'?  	;WILDCARD ?
	BEQ NEXTTF	;CHR OK
	CMP BUF,X	;COMPARE CHR
	BNE SRCHF	;NEXT TRY
NEXTTF	INX		;NEXT CHR
	CPX #16  	;CHR'S LEFT
	BCC TFLOOP
RPROG   CLC		;FILE FOUND
SRCHFX	RTS

;===  SAVE ONE BLOCK

BSAVE   SEI		;BLOCK ALL INTERRUPTS
	LDA #LSS1 	;SET FOR 3600 BAUD
	STA WTIME1
	STA T2L   	;SET TIMER
	LDA #LSS0
	STA WTIME0
	LDA #0
	STA T2H   	;START TIMER
	LDA BAUD		;SET FOR BAUDRATE
	BPL SETW36
	LDA #HSS1  	;SET FOR 7200 BAUD
	STA WTIME1
	LDA #HSS0
	STA WTIME0
SETW36	LDA #64   	;SET FOR 64 SYNC'S
	STA WSCNT
SYNCL   LDA #SYNC 	;SYNC CODE
	JSR WNIB  	;WRITE 2 NIBBLES
	BCS BSAVX
	JSR WNIB
	BCS BSAVX
	DEC WSCNT
	BNE SYNCL
	LDA BLOCKA	;WRITE BLOCK MARK
	JSR WNIB
	BCS BSAVX
	JSR WNIB
	BCS BSAVX
	LDY #0		;CLEAR COUNTERS
	STY PRCNTL
	STY PRCNTH
	STY BCNTL
	STY BCNTH
WDAT	LDA (TAPEVL),Y	;WRITE DATA
	JSR WNIB
	BCS BSAVX
	INC TAPEVL	;ADJUST POINTER
	BNE NOWTI1
	INC TAPEVH
NOWTI1	INC BCNTL 	;ADJUST BYTE COUNTER
	BNE NOWTI2
	INC BCNTH
NOWTI2	JSR WNIB  	;WRITE 2. NIBBLE
	BCS BSAVX
	LDA TAPELL	;TEST FOR LENGTH
	CMP BCNTL
	BNE WDAT
	LDA TAPELH
	CMP BCNTH
	BNE WDAT
	LDA PRCNTH	;NOW WRITE CHECKSUM
	STA TEMP
	LDA PRCNTL
	JSR WNIB
	BCS BSAVX
	JSR WNIB
	BCS BSAVX
	LDA TEMP
	JSR WNIB
	BCS BSAVX
	JSR WNIB
	BCS BSAVX
	JSR WNIB  	;COMPLETE LAST BIT
	BCS BSAVX
	CLI		;ALLOW IRQ
	CLC
BSAVX	RTS

;===  WRITE ONE NIBBLE

WNIB	STA IBYTE 	;SAVE TO INPUT BUFFER
	LDY #4    	;SET FOR 4 BITS
WLOOP	LDA #TIMMSK	;TIMER-BIT
WLOOP1	BIT IFR
	BEQ WLOOP1
	LDA BPORT 	;INVERT BIT
	EOR #OUTMSK
	STA BPORT
	STA PORT
	LSR IBYTE 	;0 OR 1?
	BCS WEINS
	LDA WTIME0	;TIMER LOAD
	STA T2L
	LDA #0
	STA T2H   	;TIMER START
	BIT BREAKP	;BREAK?
	BMI WIRQ
	LDA #ERR5
	SEC
	RTS

WIRQ	LDA #TIMMSK	;MASK TIMER-BIT
WIRQ1	BIT IFR   	;TIMEOUT
	BEQ WIRQ1
	LDA BPORT 	;INVERT BIT
	EOR #OUTMSK
	STA BPORT
	STA PORT
	NOP		;EXTRA DELAY
	NOP
	NOP
	LDA WTIME0 	;TIMER LOAD
	STA T2L
	LDA #0
	STA T2H   	;TIMER START
	BEQ WLOOPX
WEINS   LDA WTIME1	;TIMER LOAD
	STA T2L
	LDA #0
	STA T2H   	;TIMER START
	INC PRCNTL	;INCREMENT CHECKSUM
	BNE WLOOPX
	INC PRCNTH
WLOOPX	DEY		;ONE BIT LESS
	BNE WLOOP
	LDA IBYTE
	CLC
	RTS

;===  READ ONE BLOCK

BLOAD   SEI		;BLOCK IRQ
	LDX #LSL  	;3600 BAUD
	LDA BAUD
	BPL SET36
	LDX #HSL  	;7200 BAUD
SET36   STX T2L   	;SET TIMER
	LDA #0
	STA T2H   	;START TIMER
READL   JSR RBIT  	;SYNC BYTE?
	CMP #SYNC
	BNE READL
	LDX #11   	;11 SYNC BYTES
RHA	LDY #8		;A 8 BIT
SLOOP   JSR RBIT
	DEY
	BNE SLOOP
	CMP #SYNC 	;SYNC?
	BNE READL
	DEX
	BNE RHA
RHB	LDY #8		;LAST SYNC?
LLOOP   JSR RBIT
	DEY
	BNE LLOOP
	CMP #SYNC
	BEQ RHB
	CMP BLOCKA	;RIGHT BLOCK
	BEQ LLL
	CMP #BLMARK
	BEQ READL 	;DATENBLOCK
	LDA #ERR1 	;READ ERROR
	SEC
	RTS

LLL	LDA #0		;RESET CHECKSUM
	STA PRCNTL
	STA PRCNTH
	STA BCNTL 	;RESET BYTE COUNTER
	STA BCNTH
	LDY #8		;FIRST BYTE
FLOOP   JSR RBIT
	DEY
	BNE FLOOP
	STA LBYTE 	;LASTBYTE
RBYTE   LDA PRCNTL	;SAVE CHECKSUM
	STA PRBUFL
	LDA PRCNTH
	STA PRBUFH
	JSR RBIT  	;READ 2 BITS
	JSR RBIT
	LDA VFLAG 	;STORE IF LOAD
	BNE VERI
	LDA LBYTE
	STA (TAPEVL),Y
VERI	JSR RBIT  	;NEXT 2 BITS
	JSR RBIT
	LDA LBYTE 	;VERIFY
	CMP (TAPEVL),Y
	BEQ VEROK
	LDA #ERR3 	;VERIFY ERROR
	SEC
	RTS

VEROK   JSR RBIT  	;NEXT 2 BITS
	JSR RBIT
	INC TAPEVL	;INCREMENT POINTER
	BNE TNINC1
	INC TAPEVH
TNINC1  INC BCNTL 	;INCREMENT BYTECOUNTER
	BNE TNINC2
	INC BCNTH
TNINC2  JSR RBIT  	;READ LAST 2 BITS
	JSR RBIT
	STA LBYTE 	;SAVE BYTE
	LDA TAPELH	;END OF BLOCK?
	CMP BCNTH
	BNE RBYTE
	LDA TAPELL
	CMP BCNTL
	BNE RBYTE
	LDA LBYTE 	;CHECKSUM
	CMP PRBUFL
	BNE LOERR  	;LOAD ERROR
	LDY #8		;LAST BYTE
LCLOOP  JSR RBIT
	DEY
	BNE LCLOOP
	CMP PRBUFH
	BNE LOERR 	;OK
	CLC
	RTS

LOERR	LDA #ERR2	;LOAD ERROR
	SEC
	RTS


;===  READ 1 BIT

RBIT	LDA #TIMMSK	;MASK TIMER-BIT
RBIT1	BIT IFR
	BEQ RBIT1
	BIT PORT  	;FLANKE?
CRA	BVS RNULL 	;0 BIT
REINS	INC PRCNTL	;ADJUST CHECKSUM
	BNE EINSI
	INC PRCNTH
EINSI	SEC       	;SHIFT 1
	BCS BITIN
RNULL	LDA CRA   	;INVERT EDGE DETECT
	STA CRA1
	EOR #%00100000
	STA CRA
	CLC		;SHIFT 0
BITIN   ROR IBYTE 	;1 BIT IN
	LDA BREAKP	;BREAK?
	BMI FLAN
	PLA		;EXIT BLOAD!
	PLA
	LDA #ERR4	;READ BREAK
	SEC
	RTS

FLAN	BIT PORT
CRA1	BVC FLAN  	;WAIT FOR EDGE
	LDA #0		;START TIMER 2
	STA T2H
	LDA CRA1  	;INVERT EDGE
	STA CRA
	EOR #%00100000
	STA CRA1
	LDA IBYTE 	;GET BYTE
	RTS


;0.3 S DELAY

DELAY   LDX #0
DELAY1  DEY
	BNE DELAY1
	DEX
	BNE DELAY1
DELAY2  RTS

;INITIALIZE PORTS

INIT	LDA #%00111111	;BIT 6,7 ARE INPUTS
	STA PADD
	LDA PBD
	ORA #%00011110	;SHUT OFF DISPLAY
	STA PBD
	LDA #$00	;INIT ACR,IER,IFR
	STA ACR
	LDA #$7F
	STA IER
	STA IFR
	RTS


ERROR	STA ERRNO	;ERROR ROUTINE
	JSR CRLF
	LDA #ERRTAB	;SET CCPV
	STA CCPV
	LDA #ERRTAB/256
	STA CCPV+1
	LDY #0  	;CHECK ERROR CODE
	LDA (CCPV),Y
ERROR1	BEQ ERROR4	;END OF ERROR ROUTINE
	CMP ERRNO
	BEQ ERROR3
ERROR2	JSR INCCPV	;SKIP ERROR MESSAGE
	BNE ERROR2
	JSR INCCPV
	JMP ERROR1

ERROR3	JSR INCCPV
	PHA
	JSR ERRTYP	;PRINT ERROR TYPE
	JSR INCCPV
	LDA CCPV	;PRINT ERROR MESSAGE
	LDY CCPV+1
	JSR PRTSTR
	PLA
	BPL ERROR5
	JSR ASKRTY	;ASK FOR RETRY
	LDA ERRNO
	RTS

ERROR4  JSR UETYP	;UNKNOWN ERROR
ERROR5  SEC
	RTS


ERRTYP  LDY #0  	;PRINT ERROR TYPE
ERRTY1  LSR A   	;SHIFT SOURCE BIT IN C
	BCS ERRTY2
	INY		;X= X+5
	INY
	INY
	INY
	INY
	BNE ERRTY1

ERRTY2  LDA ETYPTB,Y
	BEQ UETYP	;LAST CHR?
	JSR PRTCHR
	INY
	BNE ERRTY2

UETYP   LDA #ERRM1
	LDY #ERRM1/256
	JSR PRTSTR
	LDA ERRNO
	JSR PRTHEX

CRLF	LDA #CRLFM	;PRINTS A NEWLINE
	LDY #CRLFM/256

PRTSTR  LDX #STROUT
	JMP BDOS


PRT2SP  JSR PRTSP
PRTSP   LDA #SP
PRTCHR  LDX #CONOUT	;PRINTS A CHR
	JMP BDOS


INCCPV  INC CCPV	;INC CCPV
	BNE INCCP1
	INC CCPV+1
INCCP1  LDA (CCPV),Y
	RTS


ASKRTY  LDA #RTYMES	;RETRY?
	LDY #RTYMES/256
	JSR PRTSTR
	LDX #CONIN
	JSR BDOS
	CMP #'y
	BEQ ASKRT1
	CMP #'Y
	BEQ ASKRT1
	SEC
	RTS

ASKRT1  CLC
	RTS


PRTHEX  PHA		;PRINTS A HEX NUMBER
	LSR A
	LSR A
	LSR A
	LSR A
	JSR PRTNIB	;PRINT NIBBLE
	PLA
	AND #$0F

PRTNIB  CMP #$0A
	BCC PRTNI1
	ADC #6
PRTNI1  ADC #$30
	JSR PRTCHR
	RTS

;======   MESSAGES  ======

ERRM1   DB ' Error $',EOT
RTYMES  DB CR,LF,'Retry  (Y/N) ? ',EOT

ETYPTB  DB 'BIOS',$00,'BDOS',$00,'CCP',$00,$00
	DB 'RSX',$00,$00,'USER',$00

ERRTAB  DB $F9,$01,'Invalid Drive',EOT
	DB $DE,$82,'Directory full',EOT
	DB $DD,$82,'File not found',EOT
	DB $DC,$02,'File exists',EOT
	DB $D9,$02,'Invalid FCB',EOT
	DB $D8,$82,'Disk full',EOT
	DB $D6,$82,'File is R/O',EOT
	DB $85,$10,'Write BREAK',EOT
	DB $84,$10,'Read BREAK',EOT
	DB $83,$10,'Verify Error',EOT
	DB $82,$90,'Checksum not correct',EOT
	DB $81,$90,'Read Error',EOT

	DB $00

CRLFM   DB CR,LF,EOT
STARTM	DB CR,LF,'SUPERTAPE V1.4            '
	DB '   (c) D. Lausberg    31.12.90',CR,LF,CR,LF,EOT
READM	DB CR,LF,'reading file to disk',CR,LF
	DB 'insert tape and press <PLAY>',CR,LF,CR,LF,EOT
WRM1	DB CR,LF,'write file to tape',CR,LF,EOT
WRM2	DB CR,LF,'insert tape and press <REC> and <PLAY>'
	DB CR,LF,'then press any key',CR,LF,EOT
ENDM	DB CR,LF,'SUPERTAPE finished',CR,LF,CR,LF,EOT

LOMEM

	END
