;SCSIMGR.COM -- CP/M-65 SCSI-Manager
;BY D. LAUSBERG	 (C)1994
;V1.0	29.12.94
;V1.1	10.03.95	new memory map

;SYSTEM CONSTANTS

DMA	= $FE
FCB1	= $F6
BDOS	= $F0
INBUF	= $EC
CCPV	= $DE
CMDVEC	= 0
CMDKEY	= 1
RCOUNT	= 2
BYTE	= 3
TEMPA	= 4
TEMPX	= 5
TEMPY	= 6
OFFH	= 7
ERRNO	= 8
COUNT	= 9
CNT	= 10
XCNT	= 11
MCNT	= 13
NUMBER	= 14
OPCODE	= 15
LENGTH	= 16
PAGES	= 17
FLAGNR	= 18
HEX	= 20
PNT	= 22
BEGAD	= 24
ENDAD	= 26
CURAD	= 28
N1	= 30
N2	= 31
MSB	= 32		;LOGICAL BLOCK 3 BYTES!

COMMAND	= $40
RESBUF	= $50


TPA	= $0200
BUFFER	= $8000		;SCSI SECTOR BUFFER
SCSI	= $F500
DATA	= SCSI		;SCSI DATA PORT
STATUS	= SCSI+$10	;SCSI STATUS PORT
SEL	= SCSI+$20	;SCSI SELECT
RESET	= SCSI+$30	;SCSI RESET
IRQ	= $FA7C

;BIOS COMMANDS

CBOOT	= 0

;BDOS COMMANDS

BOOT	= $00
CONIN	= $01
CONOUT	= $02
STROUT	= $09
GETLIN	= $0A
DSKSEL	= $0E
OPEN	= $0F
CLOSE	= $10
RDSEQ	= $14
WRITE	= $15
CREATE	= $16
DEFDRV	= $19
BIOS	= $1A

;CONTROL CODES
BS	= $08
CLS	= $0C
CR	= $0D
EOT	= $00
LF	= $0A
SP	= $20

;PARAMETERS

BUS_RESET = $29

;ERROR CODES
DOUBLE	= $DC
EOF	= $D7
NOCOM	= $80
MISPAR	= $81
ILLPAR	= $82
TOOMCH	= $83
EOL	= $84
M_OVERLAP = $85		;MOVE OVERLAP
RES_ERR	= $86		;SCSI RESET ERROR
NO_DATA	= $87		;SCSI NO DATA AVAILABLE
NO_COM	= $88		;SCSI NO COMMAND REQUESTED
RD_ERR	= $89		;SCSI READ ERROR
WR_ERR	= $8A		;SCSI WRITE ERROR
SCSI_ERR = $8B		;SCSI INITIALISATION ERROR
COM_ERR	= $8C		;SCSI command failed

	ORG TPA

SCSIMGR	JSR INIT	;INIT VARIABLES
	BCS SCSI2
SCSIL	LDA #PROMPT
	LDY #PROMPT/256
	JSR PRTSTR
	LDX #GETLIN
	JSR BDOS
	LDY #0		;SET COMMAND POINTER
	STY CMDVEC
SCSI1	JSR DECODE	;DECODE AND EXEC COMMAND
	BCC SCSI1
	CMP #EOL	;END OF COMMAND
	BEQ SCSIL
SCSI2	JSR ERROR
	JMP SCSIL


DECODE	JSR GNCHR	;GET NEXT CHR
	BCS DECODX
	CMP #'; 	;SEPARATOR?
	BNE DECOD1
	JSR GNCHR
	BCS DECODX
DECOD1	LDY #0		;SEARCH COMMAND
	STA CMDKEY
DECOD4	LDA CMDTAB,Y
	BEQ DECOD2	;COMMAND NOT FOUND
	CMP CMDKEY
	BEQ DECOD3	;FOUND
	INY
	INY
	INY
	BNE DECOD4

DECOD3	INY
	LDA CMDTAB,Y
	PHA
	INY
	LDA CMDTAB,Y
	PHA
	RTS		;EXEC

DECOD2	LDA #NOCOM	;UNKNOWN COMMAND
	SEC
DECODX	RTS

;========== COMMANDS ============= 

DUMP	JSR G1ADR	;DUMP
	BCS DUMPX
	LDA PNT
	AND #$F0
	STA PNT
	JSR GETHEX	;GET 2. PARAMETER
	STA ENDAD
	STY ENDAD+1
	BCC DUMP1
	CMP #MISPAR
	BNE DUMP2
	CLC
	LDA PNT
	ADC #$E0	;14 LINES DEFAULT
	STA ENDAD
	LDA PNT+1
	ADC #0
	STA ENDAD+1
DUMP1	JSR DUMPHE	;PRINT HEADER
DUMP3	JSR DUMPL	;PRINT LINE
	BCC DUMP3
	JSR FIXCUR
DUMPX	RTS

DUMP2	SEC
	RTS


FILL	JSR G1ADR	;FILL MEMORY
	BCS FILLX
	JSR GETHEX	;GET 2. ARGUMENT
	BCS FILLX
	STA ENDAD
	STY ENDAD+1
	JSR GETHEX	;GET BYTE
	BCS FILLX
FILL1	LDY #0
	STA (PNT),Y
	JSR CHKEND
	BCS FILL2
	INC PNT
	BNE FILL1
	INC PNT+1
	BNE FILL1

FILL2	CLC
FILLX	RTS


MOVE	JSR G1ADR	;MOVE TO 1. ARGUMENT
	BCS MOVEX
	JSR GETHEX	;GET 2. ARGUMENT START
	BCS MOVEX
	STA BEGAD
	STY BEGAD+1
	JSR GETHEX	;GET 3. ARGUMENT END
	BCS MOVEX
	STA ENDAD
	STY ENDAD+1
	CPY CURAD+1	;ENDAD<CURAD?
	BCC MOVE1
	CMP CURAD
	BCC MOVE1
	LDA CURAD+1	;BEGAD>CURAD?
	CMP BEGAD+1
	BCC MOVE1
	LDA CURAD
	CMP BEGAD
	BCC MOVE1
	LDA #M_OVERLAP
	RTS

MOVE1	LDA PNT+2
	PHA
	LDA PNT+3
	PHA
	LDY #0
	LDA BEGAD
	STA PNT+2
	LDA BEGAD+1
	STA PNT+3
MOVE2	LDA (PNT+2),Y
	STA (PNT),Y
	LDA PNT+3	;CHECK FOR PNT+2=ENDAD
	CMP ENDAD+1
	BCC MOVE5
	LDA PNT+2
	CMP ENDAD
	BCS MOVE3
MOVE5	INC PNT		;INC PNT
	BNE MOVE4
	INC PNT+1
MOVE4	INC PNT+2	;INC PNT+2
	BNE MOVE2
	INC PNT+3
	JMP MOVE2

MOVE3	PLA		;RESTORE PNT+2
	STA PNT+3
	PLA
	STA PNT+2
	CLC
MOVEX	RTS


LIST	JSR G1ADR	;DISASSEMBLE
	BCS LISTX
	JSR GETHEX
	STA ENDAD
	STY ENDAD+1
	LDY #$80
	BCC LIST1
	CMP #MISPAR
	BNE LIST2
	LDY #14 	;14 LINES DEFAULT
LIST1	STY CNT
LISTL	LDY #0
	LDA (PNT),Y
	JSR DASM
	JSR JNEXT	;ADD OPLEN
	BIT CNT
	BPL LIST4
	JSR CHKEND
	BCC LISTL
	JSR FIXCUR
LISTX	RTS

LIST2	SEC
	RTS

LIST4	DEC CNT
	BNE LISTL
	JSR FIXCUR
	RTS


CHANGE	JSR G1ADR
	BCS CHANGX
	LDA #0
	STA COUNT
CHANG1	JSR GNKEY
	BCS CHANGX
	LDY COUNT
	STA (PNT),Y
	INC COUNT
	BNE CHANG1
	LDA #TOOMCH
	SEC
CHANGX	RTS


ENTER	JSR G1ADR
	BCS ENTERX
ENTER4	JSR GETHEX
	BCS ENTER3
	PHA
	JSR DUMPHE
	LDY #0
	LDA (PNT),Y
	JSR DISHEX
	PLA
	STA (PNT),Y
	JSR PRTHEX
	INC PNT
	BNE ENTER4
	INC PNT+1
	JMP ENTER4

ENTER3	CMP #MISPAR
	BNE ENTER2
	CLC
	RTS

ENTER2	SEC
ENTERX	RTS


EXECUTE	JSR GDEC		;GET d1
	BCC EXE1
	CMP #MISPAR
	BNE EXE2
	LDA #0
EXE1	STA N1
	JSR GDEC		;GET d2
	BCC EXE5
	CMP #MISPAR
	BNE EXE2
EXE3	LDA #6
EXE5	STA N2
	LDA #0			;SELECT ID 0
	JSR SELECT
	BCS EXE2
	LDA N2			;AND EXECUTE COMMAND IN COMMAND BUFFER
	JSR COM
	BCS EXE2
	LDA N1			;GET D2 RESULT BYTES
	BEQ EXE4
	JSR RESULT
	BCC EXE4
	CMP #NO_DATA
	BNE EXE2
EXE4	JSR GET_SM
EXE2	RTS


PUT	JSR RW_PRE		;PREPARE COMMAND
	BCS PUTX
	LDA #$0A		;WRITE COMMAND
	STA COMMAND
	LDA #0
	JSR SELECT
	BCS PUTX
	LDA #6
	JSR COM
	BCS PUTX
	JSR WRITE_BL
	BCS PUTX
	JSR GET_SM
PUTX	RTS


GET	JSR RW_PRE
	BCS GETX
	LDA #$08		;READ COMMAND
	STA COMMAND
	LDA #0
	JSR SELECT
	BCS GETX
	LDA #6
	JSR COM
	BCS GETX
	JSR READ_BL
	BCS GETX
	JSR GET_SM
GETX	RTS


SET	JSR GETHEX		;SET MSB OF SCSI LOGICAL BLOCK
	BCS SET2
	CPY #0
	BNE SET1		;INVALID ARGUMENT
	CMP #3
	BCS SET1
	STA MSB
	RTS

SET2	LDA MSB
	JSR DISHEX
	CLC
	RTS

SET1	LDA #ILLPAR
	SEC
	RTS


IN	JSR G1ADR		;INPUT FROM ADDR
	BCS IN_X
	LDY #0
	LDA (PNT),Y
	JSR DISHEX
	CLC
IN_X	RTS


OUT	JSR G1ADR		;OUTPUT TO ADDR
	BCS OUTX
	JSR GETHEX
	BCS OUTX
	CPY #0
	BNE OUT1
	STA (PNT),Y
	CLC
	RTS

OUT1	LDA #ILLPAR
	SEC
OUTX	RTS


REST	LDA #$80		;INITIALIZE SCSI DRIVE
	STA RESET
	LDX #0
RESET1	DEX
	BNE RESET1
	LDA #0
	STA RESET
	LDX #0
RESET2	DEX
	BNE RESET2
	LDA STATUS
	CMP #$26
	BNE C_SENS2

C_SENSE	LDX #5			;SENSE COMMAND
C_SENS1	LDA SENSE,X
	STA COMMAND,X
	DEX
	BPL C_SENS1
COMX	LDA #4
	STA N1
	JSR EXE3
	BCS C_SENS2
	LDX #0
	LDA RESBUF,X
	CMP #BUS_RESET
	BNE C_SENS3
	CLC
	RTS

C_SENS2	LDA #SCSI_ERR
C_SENS3 SEC
	RTS

	
QUIT	LDY #CBOOT
	LDX #BIOS
	JMP BDOS


HELP	LDA #HELPM
	LDY #HELPM/256
	JSR PRTSTR
	RTS


WAIT	JSR GDEC	;WAIT NN/10 S
	BCS WAITX
	STA CNT
WAIT3	LDA #10
	STA MCNT	;100 MS
WAIT2	LDX #78
WAIT1	DEY
	BNE WAIT1
	DEX
	BNE WAIT1
	DEC MCNT
	BNE WAIT2
	DEC CNT
	BNE WAIT3
	CLC
WAITX	RTS


REPEAT	LDA RCOUNT	;REPEAT COMMAND
	BEQ REPEA1
REPEA3	DEC RCOUNT	;ONE MORE TIME
	BEQ REPEA5
	LDA #0
	STA CMDVEC
	CLC
	RTS

REPEA1	JSR GDEC	;GET NO. OF REPEATS
	BCS REPEA2
	STA RCOUNT
	CMP #0
	BNE REPEA3
	LDA #ILLPAR
REPEA4	SEC
	RTS

REPEA2	CMP #MISPAR
	BNE REPEA4
	LDA #10 	;DEFAULT 10 TIMES
	STA RCOUNT
	BNE REPEA3

REPEA5	LDA #EOL
	SEC
	RTS

;======  SUBROUTINES  ============== 

INIT	LDA #TPA
	STA CURAD
	LDA #TPA/256
	STA CURAD+1
	LDA #0
	STA MSB	;reset MSB
	LDA #INIT_M
	LDY #INIT_M/256
	JSR PRTSTR	;PRINT INITILIZATION MESSAGE
	CLC
	RTS


NXTCHR	JSR GNCHR	;GET NEXT CHR FROM INBUF
	BCS NXTCH1
	JSR CHRCHK	;CHECK CHR
	BCS NXTCHX
	CMP #SP
	BEQ NXTCHX
	CMP #'.
	BEQ NXTCH3
	LDY CNT
	CPY MCNT
	BCS NXTCHX
	STA (FCB1),Y
	INC CNT
NXTCHX	RTS

NXTCH3	LDY #1
	CPY CNT 	;'. IS INVALID AS 1. CHR
	BEQ NXTCHX
	LDY MCNT
	STY CNT
	CLC
	RTS

NXTCH1	LDA #SP 	;END OF CMD
	RTS


CHRCHK	CMP #'A 	;CHECK FOR VALID CHR
	BCC CHRCH1
	CMP #'[
	BCS CHRCH3
	RTS

CHRCH3	CMP #'a
	BCC CHRCH1
	CMP #'{
	BCS CHRCH1
	AND #$5F	;LOWER TO UPPER CASE
	RTS

CHRCH1	LDY #LENTAB-KEYTAB
CHRCH2	DEY
	BMI CHRCHX
	CMP KEYTAB,Y
	BNE CHRCH2
	CLC
	RTS

CHRCHX	SEC
	RTS


CHKNXT	JSR GNCHR
	BCS CHKNX1
	CMP #SP
	BEQ CHKNXT
	CMP #';
	BEQ CHKNX2
	DEC CMDVEC
	CLC
	RTS

CHKNX1	CMP #EOL
	BNE CHKNX3
CHKNX2	LDA #MISPAR
CHKNX3	SEC
	RTS


JNEXT	CLC		;JUMP TO NEXT INSTRUCTION
	ADC PNT
	STA PNT
	BCC JNEXTX
	INC PNT+1
JNEXTX	RTS


FIXCUR	LDA PNT
	STA CURAD
	LDA PNT+1
	STA CURAD+1
	CLC
	RTS


DUMPHE	JSR PRTPC	;PRINT PC
	LDA #':
	JSR PRTCHR
	JSR PRTSP
	RTS


PRTPC	JSR CRLF
	LDA PNT+1
	JSR PRTHEX
	LDA PNT
	JSR PRTHEX
	RTS


DUMPL	JSR CRLF
	LDY #0
DUMPL1	LDA (PNT),Y
	JSR DISHEX
	INY
	CPY #8
	BNE DUMPL3
	LDA #BS
	JSR PRTCHR
DUMPL3	CPY #$10
	BCC DUMPL1
	LDY #0
DUMPL2	LDA (PNT),Y
	JSR DISASC
	INY
	CPY #$10
	BCC DUMPL2
	TYA
	JSR JNEXT
	JSR CHKEND
	RTS


SELECT	AND #$07		;SELECT SCSI UNIT IN ACCU
	TAY
	JSR WAITRDY		;WAIT FOR BUS READY
	LDA #1			;SET ID BIT
SEL1	DEY
	BMI SEL2
	ASL A
	BNE SEL1

SEL2	STA DATA		;SET BUS BIT
	STA SEL			;AND SELECT

WAITBSY	LDA STATUS		;WAIT FOR BUS BUSY
	AND #$08		;CHECK BSY BIT
	BEQ WAITBSY
	CLC
	RTS


COM	TAY			DO SCSI COMMAND
	JSR WAITREQ
	LDX #0
COM1	BIT STATUS		;CHECK C/D BIT
	BPL COM2
	BVC COM1		;check REQ bit
	LDA COMMAND,X
	STA DATA		;SEND COMMAND BYTE
	INX
	DEY
	BNE COM1
	CLC
	RTS

COM2	LDA #NO_COM
	SEC
	RTS


RESULT	AND #$3F		;MAX. 64 RESULT BYTES
	TAY
	LDX #0
RESULT1	JSR GET_BYT
	BCS RESULT2
	INX
	DEY
	BPL RESULT1
	CLC
RESULT2	RTS


GET_BYT	JSR WAITREQ		;GET SCSI RESULT BYTE
	BMI GETBYT1		;CHECK C/D LINE
	LDA STATUS
	AND #$01		;check I/O line
	BEQ GETBYT2
	LDA DATA
	STA RESBUF,X
	STX TEMPX
	STY TEMPY
	JSR DISHEX
	LDX TEMPX
	LDY TEMPY
	CLC
	RTS

GETBYT2	LDA RESBUF,X
	STA DATA
	CLC
	RTS

GETBYT1	LDA #NO_DATA		;NO MORE RESULT DATA
	SEC
	RTS


GET_SM	JSR WAITREQ		;GET STATUS AND MESSAGE BYTES
	LDA DATA		;STATUS
	JSR WAITREQ
	LDY DATA		;MESSAGE
	BNE GET_SM1
	CMP #0
	BNE GET_SM1
	JSR DISHEX
	CLC
	RTS

GET_SM1	JSR DISHEX
	TYA
	JSR DISHEX
	LDA #COM_ERR
	SEC
	RTS


READ_BL	JSR WAITREQ		;READ BLOCK INTO BUFFER
	LDY #0
READ_B1	LDA DATA		;READ PAGE 0
	STA BUFFER,Y
	INY
	BNE READ_B1
READ_B2	LDA DATA		;READ PAGE 1
	STA BUFFER+256,Y
	INY
	BNE READ_B2
	JSR WAITREQ
	BIT STATUS
	BPL READ_ERR
	CLC
	RTS

READ_ERR LDA #RD_ERR
	SEC
	RTS


WRITE_BL JSR WAITREQ		;WRITE BLOCK INTO BUFFER
	LDY #0
WRITE_B1 LDA BUFFER,Y		;WRITE PAGE 0
	STA DATA
	INY
	BNE WRITE_B1
WRITE_B2 LDA BUFFER+256,Y	;WRITE PAGE 1
	STA DATA
	INY
	BNE WRITE_B2
	JSR WAITREQ
	BIT STATUS
	BPL WRITE_ERR
	CLC
	RTS

WRITE_ERR LDA #WR_ERR
	SEC
	RTS


RW_PRE	JSR GETHEX		;GET BLOCK ADDRESS
	BCS RW_PREX
	STA COMMAND+3
	STY COMMAND+2
	LDA MSB
	STA COMMAND+1
	LDA #1			;1 BLOCK
	STA COMMAND+4
	LDA #0
	STA COMMAND+5
RW_PREX	RTS


WAITRDY	LDA STATUS		;WAIT FOR BUS READY
	AND #$08		;CHECK BSY BIT
	BNE WAITRDY
	CLC
	RTS


WAITREQ	BIT STATUS		;WAIT FOR SCSI BUS REQUEST
	BVC WAITREQ		;CHECK REQ BIT
	CLC
	RTS


CHKEND	LDY PNT+1
	CPY ENDAD+1
	BCC CHKENX
	LDY PNT
	CPY ENDAD
CHKENX	RTS


DISHEX	JSR PRTHEX	;DISPLAYS A HEX
	JSR PRTSP
	RTS


DISASC	AND #$7F
	CMP #$20
	BCC DISAS1
	CMP #$7F
	BCC DISAS2
DISAS1	LDA #'.
DISAS2	JSR PRTCHR
	RTS


G1ADR	JSR GETHEX
	BCC G1ADR1
	CMP #MISPAR
	BNE G1ADR2
	LDA CURAD
	LDY CURAD+1
G1ADR1	STA PNT
	STA CURAD
	STY PNT+1
	STY CURAD+1
	CLC
	RTS

G1ADR2	SEC
	RTS


GDEC	JSR GETHEX	;GETS A DECIMAL FROM LINE
	BCS GDECX
	AND #$0F
	CMP #10
	BCS GDEC1
	STA NUMBER	;EINER
	LDA HEX
	AND #$F0
	LSR A		;ZEHNER*8
	PHA
	CLC
	ADC NUMBER
	STA NUMBER
	PLA
	LSR A
	LSR A		;ZEHNER*2
	CLC
	ADC NUMBER
	CPY #3		;Y=HEXH
	BCS GDEC1
GDEC5	DEY
	BMI GDEC4
	ADC #100
	BCC GDEC5
GDEC1	LDA #ILLPAR
	SEC
GDECX	RTS

GDEC4	STA NUMBER
	CLC
	RTS


GKHEX	JSR GNCHR
	BCS GKHEX1
	CMP #';
	BEQ GKHEX1
	CMP #',
	BNE GKHEX2
	JSR GETHEX
	RTS

GKHEX1	LDA #MISPAR
	SEC
	RTS

GKHEX2	LDA #ILLPAR
	SEC
	RTS


GETHEX	LDA #0 		;GET HEX NUMBER FROM LINE
	STA HEX		;RESET HEX
	STA HEX+1
	TAX
GETHE2	JSR GETNIB	;GET NIBBLE TO HEX
	BCS GETHE1
	INX
	CPX #5
	BCC GETHE2
GETHE5	LDA #ILLPAR	;ILLEGAL PARAMETER
	SEC
	RTS

GETHE1	CPX #0
	BNE GETHE3
	CMP #SP
	BEQ GETHE2
	CMP #EOL
	BEQ GETHE6
	CMP #';
	BNE GETHE5
GETHE6	LDA #MISPAR
	SEC
	RTS

GETHE3	CMP #';
	BEQ GETHE4
	CMP #',
	BEQ GETHE4
	CMP #EOL
	BNE GETHE5
GETHE4	LDA HEX
	LDY HEX+1
	CLC
	RTS


GETNIB	JSR GNCHR	;GET NIBBLE TO HEX
	BCS GETNIX
	CMP #'0
	BCC GETNI1
	CMP #$3A
	BCC GETNI2
	CMP #'A
	BCC GETNI1
	CMP #'G
	BCC GETNI3
GETNI1	SEC
GETNIX	RTS

GETNI3	CLC
	ADC #9
GETNI2	AND #$0F
	LDY #4
GETNI4	ASL HEX
	ROL HEX+1
	DEY
	BNE GETNI4
	ORA HEX
	STA HEX
	CLC
	RTS


GNCHR	JSR GNKEY
	BCS GNCHRX
	JSR UPCASE
	CLC
GNCHRX	RTS


GNKEY	LDY #0
	INC CMDVEC
	LDA CMDVEC
	CMP (INBUF),Y
	BCS GNKEYX
	TAY
	LDA (INBUF),Y
	RTS

GNKEYX	LDA #EOL
	RTS


UPCASE	CMP #'a 	;LOWER --> UPPER CASE
	BCC UPCASX
	CMP #'~
	BCS UPCASX
	AND #$5F
UPCASX	RTS


PRTDEC	JSR COMNUM	;PRINTS DECIMAL
	PHA
	TYA
	JSR COMNUM
	PHA
	TYA
	JSR PRTNUM
	PLA
	JSR PRTNUM
	PLA
	JSR PRTNUM
	RTS


COMNUM	LDY #0		;DIV/10
COMNU1	SEC
	SBC #10
	BCC COMNU2
	INY
	BNE COMNU1

COMNU2	ADC #10
	RTS


PRTNUM	ORA #$30	;PRINT A NUMBER
	JMP PRTCHR


DASM	STA OPCODE	;DISASSEMBLE 1 LINE
	JSR PRTPC
	JSR PRTSP
	LDA OPCODE
	JSR OPLEN
	STA LENGTH
	STA XCNT
	LDA OPCODE
	JSR DISHEX
	LDY #1
	DEC XCNT
	BEQ DASM3	;1 BYTE OPCODE
DASM1	LDA (PNT),Y
	JSR PRTHEX
	INY
	DEC XCNT
	BNE DASM1
DASM3	CPY #4
	BCS DASM2
	JSR PRT2SP
	INY
	BNE DASM3

DASM2	JSR PRTSP
	LDA #4
	CMP LENGTH
	BEQ DASM4
	JSR MNEM
	LDA LENGTH
DASMX	RTS

DASM4	JSR ILLOPC
	LDA LENGTH
	RTS


OPLEN	LDX #1
	CMP #0
	BEQ OPLENX
	CMP #$40
	BEQ OPLENX
	CMP #$60
	BEQ OPLENX
	LDX #3
	CMP #$20
	BEQ OPLENX
	AND #$1F
	CMP #$19
	BEQ OPLENX
	AND #$0F
	TAX
	LDA LENTAB,X
	RTS

OPLENX	TXA
	CLC
	RTS


MNEM	LDA OPCODE
	AND #$0F	;RIGHT NIBBLE
	ASL A
	TAX
	LDA SRTAB,X
	PHA
	INX
	LDA SRTAB,X
	PHA
	LDA OPCODE
	LSR A		;HIGH NIBBLE
	LSR A
	LSR A
	LSR A
	RTS


ILLOPC	LDA #ILLOPM
	LDY #ILLOPM/256
	JSR PRTSTR
	LDY #3
	JSR PRTSPC
	RTS


SR0	LSR A
	BCC SR0A
	LDY #TAB0-TAB0
	JSR PRTMNE
	LDA #'$
	JSR PRTCHR
	JSR CALC_OFF
	PHA
	TYA
	JSR PRTHEX
	PLA
	JSR PRTHEX
SR0F	LDY #5
	JSR PRTSPC
	RTS

SR0A	CMP #4
	BCS SR0C
	PHA
	LDY #TAB01-TAB0
	JSR PRTMNE
	PLA
	CMP #1
	BEQ SR0D
	LDY #10
	JSR PRTSPC
	RTS

SR0D	JSR PRTWRD
	JMP SR0F

SR0C	BNE SR0E
	JMP ILLOPC

SR0E	LDY #TABC-TAB0
	JSR PRTMNE
	JSR PRTIMM
	RTS


SR1	LSR A
	ROR TEMPY
	LDY #TAB1-TAB0
	JSR PRTMNE
	LDA #'(
	JSR PRTCHR
	JSR PRTBYT
	BIT TEMPY
	BMI SR11
	JSR PRTKMX
	LDA #')
	JSR PRTCHR
	JMP SR12

SR11	LDA #')
	JSR PRTCHR
	JSR PRTKMY
SR12	LDY #3
	JSR PRTSPC
	RTS


SR2	CMP #$0A
	BEQ SR2A
SR2B	JSR ILLOPC
	RTS

SR2A	LSR A
	LDY #TAB6-TAB0
	JSR PRTMNE
	JSR PRTIMM
	RTS


SR4	TAX
	LDA TAB4,X
	BNE SR4A
	JMP ILLOPC

SR4A	TXA
	LDY #TABC-TAB0
SR4D	LSR A
	ROR TEMPY
	JSR PRTMNE
	JSR PRTBYT
	BIT TEMPY
	BMI SR4B
SR4E	LDY #7
SR4C	JSR PRTSPC
	RTS

SR4B	JSR PRTKMX
SR4F	LDY #5
	BNE SR4C


SR5	LDY #TAB1-TAB0
	JMP SR4D


SR6	LSR A
	ROR TEMPY
	PHA
	LDY #TAB6-TAB0
	JSR PRTMNE
	JSR PRTBYT
	PLA
	BIT TEMPY
	BPL SR4E
	CMP #4
	BCC SR4B
	CMP #6
	BCS SR4B
	JSR PRTKMY
	JMP SR4F


SR8	LDY #TAB8-TAB0
SR8A	JSR PRTMNE
	LDY #10
	JMP PRTSPC


SR9	CMP #8
	BNE SR9A
	JMP ILLOPC

SR9A	LSR A
	ROR TEMPY
	LDY #TAB1-TAB0
	JSR PRTMNE
	BIT TEMPY
	BMI SR9B
	JSR PRTIMM
	RTS

SR9B	JSR PRTWRD
	JSR PRTKMY
	LDY #3
	JSR PRTSPC
	RTS


SRA	BIT OPCODE
	BMI SRA1
	LSR A
	BCC SRA2
SRA3	JMP ILLOPC

SRA2	LDY #TAB6-TAB0
	JSR PRTMNE
	LDA #'A
	JSR PRTCHR
	LDY #9
	JMP PRTSPC

SRA1	LDY #TABA-TAB0
	AND #%00000111		;MASK BIT 3
	JMP SR8A


SRC	TAX
	LDA TABC1,X
	BNE SRC1		;VALID OPCODE?
	JMP ILLOPC

SRC1	PHA
	TXA
	LSR A
	LDY #TABC-TAB0
	JSR PRTMNE
	PLA
	PHA
	CMP #3
	BNE SRC2
	LDA #'(
	JSR PRTCHR
SRC2	JSR PRTWRD
	PLA
	CMP #1		;ABS
	BEQ SRC3
	CMP #2		;ABS,X
	BEQ SRC4
	LDA #')
	JSR PRTCHR
	LDY #4
SRC5	JMP PRTSPC

SRC3	LDY #5
	BNE SRC5

SRC4	JSR PRTKMX
	LDY #3
	BNE SRC5


SRD	LSR A
	ROR TEMPY
	LDY #TAB1-TAB0
	JSR PRTMNE
	JSR PRTWRD
	BIT TEMPY
	BMI SRC4
	BPL SRC3


SRE	STA TEMPA
	CMP #9
	BNE SRE1
	JMP ILLOPC

SRE1	LSR A
	ROR TEMPY
	LDY #TAB6-TAB0
	JSR PRTMNE
	JSR PRTWRD
	BIT TEMPY
	BMI SRE2
	LDY #5
	JMP PRTSPC

SRE2	LDA TEMPA
	CMP #$0B
	BNE SRE3
	JSR PRTKMY
	JMP SRE4

SRE3	JSR PRTKMX
SRE4	LDY #3
	JMP PRTSPC


CALC_OFF		;CALCULATE OFFSET FOR BRANCH INSTRUCTION
	LDA #0
	STA OFFH
	LDY #1
	LDA (PNT),Y	;GET OFFSET
	BPL CALC_OFF1
	DEC OFFH
CALC_OFF1
	CLC		;+START ADDRESS
	ADC PNT
	TAX
	LDA PNT+1
	ADC OFFH
	STA OFFH
	TXA
	CLC
	ADC #2		;+2
	TAX
	LDA OFFH
	ADC #0
	TAY
	TXA
	RTS
PRTMNE	STA OFFH
	ASL A		;*2
	CLC
	ADC OFFH	;*3
	STA OFFH
	TYA
	ADC OFFH	;+OFFSET
	TAY
	LDA TAB0,Y
	JSR PRTCHR
	INY
	LDA TAB0,Y
	JSR PRTCHR
	INY
	LDA TAB0,Y
	JSR PRTCHR
	JSR PRTSP
	RTS


PRTWRD	LDA #'$
	JSR PRTCHR
	LDY #2
	LDA (PNT),Y
	JSR PRTHEX
	DEY
	LDA (PNT),Y
	JMP PRTHEX


PRTIMM	LDA #'#
	JSR PRTCHR
	JSR PRTBYT
	LDY #6
	JSR PRTSPC
	RTS


PRTBYT	LDA #'$
	JSR PRTCHR
	LDY #1
	LDA (PNT),Y
	JSR PRTHEX
	RTS


PRTSPC	LDA #SP
	JSR PRTCHR
	DEY
	BNE PRTSPC
	RTS


PRTKMX	LDA #',
	JSR PRTCHR
	LDA #'X
	JMP PRTCHR


PRTKMY	LDA #',
	JSR PRTCHR
	LDA #'Y
	JMP PRTCHR


ERROR	STA ERRNO	;ERROR ROUTINE
	JSR CRLF
	LDA #ERRTAB	;SET CCPV
	STA CCPV
	LDA #ERRTAB/256
	STA CCPV+1
	LDY #0		;CHECK ERROR CODE
	LDA (CCPV),Y
ERROR1	BEQ ERROR4	;END OF ERROR ROUTINE
	CMP ERRNO
	BEQ ERROR3
ERROR2	JSR INCCPV	;SKIP ERROR MESSAGE
	BNE ERROR2
	JSR INCCPV
	JMP ERROR1

ERROR3	JSR INCCPV
	PHA
	JSR ERRTYP	;PRINT ERROR TYPE
	JSR INCCPV
	LDA CCPV	;PRINT ERROR MESSAGE
	LDY CCPV+1
	JSR PRTSTR
	PLA
	BPL ERROR5
	JSR ASKRTY	;ASK FOR RETRY
	LDA ERRNO
	RTS

ERROR4	JSR UETYP	;UNKNOWN ERROR
ERROR5	SEC
	RTS


ERRTYP	LDY #0		;PRINT ERROR TYPE
ERRTY1	LSR A
	BCS ERRTY2
	INY		;X=X+5
	INY
	INY
	INY
	INY
	BNE ERRTY1

ERRTY2	LDA ETYPTB,Y
	BEQ UETYP	;LAST CHR?
	JSR PRTCHR
	INY
	BNE ERRTY2

UETYP	LDA #ERRM1
	LDY #ERRM1/256
	JSR PRTSTR
	LDA ERRNO
	JSR PRTHEX

CRLF	LDA #CRLFM
	LDY #CRLFM/256

PRTSTR	LDX #STROUT
	JMP BDOS


PRT2SP	JSR PRTSP


PRTSP	LDA #SP


PRTCHR	LDX #CONOUT	;PRINTS A CHR
	JMP BDOS


INCCPV	INC CCPV	;INC CCPV
	BNE INCCP1
	INC CCPV+1
INCCP1	LDA (CCPV),Y
	RTS


ASKRTY	LDA #RTYMES	;RETRY?
	LDY #RTYMES/256
	JSR PRTSTR
	JSR UPCASE
	CMP #'Y
	BNE ASKRT1
	CLC
	RTS

ASKRT1	SEC
	RTS


PRTHEX	PHA
	LSR A
	LSR A
	LSR A
	LSR A
	JSR PRTNIB
	PLA
	AND #$0F

PRTNIB	CMP #$0A
	BCC PRTNI1
	ADC #6
PRTNI1	ADC #$30
	JSR PRTCHR
	RTS


;======	TABLES ====== 

KEYTAB	DB ' !#$&+-./@^_'
	DB '0123456789'
LENTAB	DB 2,2,2,4,2,2,2,4,1,2,1,4,3,3,3,4

CMDTAB	DB 'L'
	DD LIST-1
	DB 'D'
	DD DUMP-1
	DB 'C'
	DD CHANGE-1
	DB 'Q'
	DD QUIT-1
	DB '?'
	DD HELP-1
	DB 'Z'
	DD WAIT-1
	DB 'F'
	DD FILL-1
	DB 'M'
	DD MOVE-1
	DB '/'
	DD REPEAT-1
	DB 'E'
	DD ENTER-1
	DB 'X'
	DD EXECUTE-1
	DB 'P'
	DD PUT-1
	DB 'G'
	DD GET-1
	DB 'S'
	DD SET-1
	DB '@'
	DD REST-1
	DB 'I'
	DD IN-1
	DB 'O'
	DD OUT-1

	DB $00


SRTAB	DD SR0-1, SR1-1, SR2-1, ILLOPC-1	;SUROUTINE TABLE
	DD SR4-1, SR5-1, SR6-1, ILLOPC-1
	DD SR8-1, SR9-1, SRA-1, ILLOPC-1
	DD SRC-1, SRD-1, SRE-1, ILLOPC-1

TAB0	DB 'BPLBMIBVCBVSBCCBCSBNEBEQ'
TAB1	DB 'ORAANDEORADCSTALDACMPSBC'
TAB6	DB 'ASLROLLSRRORSTXLDXDECINC'
TAB8	DB 'PHPCLCPLPSECPHACLIPLASEI'
	DB 'DEYTYATAYCLVINYCLDINXSED'
TABA	DB 'TXATXSTAXTSXDEX???NOP???'
TABC	DB '???BITJMPJMPSTYLDYCPYCPX'
TAB01	DB 'BRKJSRRTIRTS'

TAB4	DB 0,0,1,0,0,0,0,0	;1=Z  2=Z,X
	DB 1,2,1,2,1,0,1,0
TABC1	DB 0,0,1,0,1,0,3,0	;1=ABS  2=ABS,X  3=(IND)
	DB 1,0,1,2,1,0,1,0

;SCSI COMMAND TABLE

COM_6				;6 BYTES COMMANDS
READY	DB 0,0,0,0,0,0
REZERO	DB 1,0,0,0,0,0
SENSE	DB 3,0,0,0,0,0		;4 STATUS BYTES
FORMAT	DB 4,0,0,0,1,0		;INTERLEAVE 1
PARK	DB $1B,0,0,0,0,0
COM_10				;10 BYTES COMMAND
CAPACITY DB $25,0,0,0,0,0,0,0,0,0


;======	MESSAGES ====== 

ERRM1	DB ' Error $',EOT
RTYMES	DB CR,LF,'Retry	(Y/N) ? ',EOT

ETYPTB	DB 'BIOS',$00,'BDOS',$00,'CCP',$00,$00
	DB 'RSX',$00,$00,'USER',$00

ERRTAB	DB $F9,$01,'Invalid Drive',EOT
	DB $DE,$82,'Directory full',EOT
	DB $DD,$82,'File not found',EOT
	DB $DC,$02,'File exists',EOT
	DB $D9,$02,'Invalid FCB',EOT
	DB $D8,$82,'Disk full',EOT
	DB $D6,$82,'File is R/O',EOT
	DB $86,$10,'SCSI RESET ERROR',EOT
	DB $87,$10,'SCSI NO DATA AVAILABLE',EOT
	DB $88,$10,'SCSI NO COMMAND REQUESTED',EOT
	DB $89,$10,'SCSI READ FAILED',EOT
	DB $8A,$10,'SCSI WRITE FAILED',EOT
	DB $8B,$10,'SCSI INITIALISATION FAILED',EOT
	DB $8C,$10,'SCSI command execution failed',EOT
	DB $85,$10,'Address overlap in move',EOT
	DB $84,$10,'End of Line',EOT
	DB $83,$10,'Too Much Parameters',EOT
	DB $82,$10,'Illegal Parameter',EOT
	DB $81,$10,'Missing Parameter',EOT
	DB $80,$10,'Unknown Command',EOT

	DB $00

PROMPT	DB CR,LF,'SCSIMGR V1.1 >',EOT

CRLFM	DB CR,LF,EOT

ILLOPM	DB '???',EOT

INIT_M	DB CLS,'        SCSIMGR V1.1',CR,LF,CR,LF
	DB 'Make shure that SCSI hardware is installed',CR,LF
	DB 'and connected to the SCSI drive',CR,LF,CR,LF
	DB 'SCSI base address must be set to $F500 !!!',CR,LF
	DB EOT

HELPM	DB CLS,'	SCSIMGR V1.1          '
	DB '	(c) 29.12.1994',CR,LF
	DB 'Command Summary:',CR,LF
	DB ' Dnnnn,mmmm	dump memory	    '
	DB ' Fnnnn,mmmm,cc fill memory',CR,LF
	DB ' Pnnnn  put buffer to blk nnnn  '
	DB ' Znn	wait for nn/10 s',CR,LF
	DB ' Gnnnn  get blk nnnn to buffer  '
	DB ' Snn        set MSB blk no.',CR,LF
	DB ' Lnnnn,mmmm	list mnemonics      '
	DB ' Ennnn,bb,bb.. enter bytes ',CR,LF
	DB ' X<d1><,d2> eXecute d2 Byte SCSI command w. d1 result bytes',CR,LF
	DB ' Cnnnn,<string>	change at ad with string',CR,LF
	DB ' Innnn        input from nnnn   '
	DB ' Onnnn,mm   output to nnnn of mm',CR,LF
	DB ' @          reset SCSI bus      '
	DB ' Mn,m,j     move to n from m,j',CR,LF
	DB ' ?	        prints this screen  '
	DB ' ;          command separator',CR,LF
	DB ' /dd        repeat dd times     '
	DB ' Q		quit to CP/M',CR,LF
	DB EOT

BTAB	DB 0

	END
